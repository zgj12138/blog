<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin_ZGJ</title>
  <subtitle>生活中的点滴都是成长的机会</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zgj12138.github.io/blog/"/>
  <updated>2017-07-15T17:25:10.575Z</updated>
  <id>https://zgj12138.github.io/blog/</id>
  
  <author>
    <name>ZGJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java多线程爬虫爬取京东商品信息</title>
    <link href="https://zgj12138.github.io/blog/2017/07/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E4%BA%AC%E4%B8%9C%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF/"/>
    <id>https://zgj12138.github.io/blog/2017/07/15/Java多线程爬虫爬取京东商品信息/</id>
    <published>2017-07-15T09:47:18.000Z</published>
    <updated>2017-07-15T17:25:10.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网络爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。爬虫可以通过模拟浏览器访问网页，从而获取数据，一般网页里会有很多个URL,爬虫可以访问这些URL到达其他网页，相当于形成了一种数据结构——图，我们通过广度优先搜索和深度优先搜索的方式来遍历这个图，从而做到不断爬取数据的目的。最近准备做一个电商网站，商品的原型就打算从一些电商网站上爬取，这里使用了HttpClient和Jsoup实现了一个简答的爬取商品的demo,采用了多线程的方式，并将爬取的数据持久化到了数据库。<br><a id="more"></a></p>
<h2 id="项目环境搭建"><a href="#项目环境搭建" class="headerlink" title="项目环境搭建"></a>项目环境搭建</h2><h3 id="整体使用技术"><a href="#整体使用技术" class="headerlink" title="整体使用技术"></a>整体使用技术</h3><p>我IDE使用了Spring Tool Suite(sts)，你也可以使用Eclipse或者是IDEA，安利使用IDEA，真的好用，谁用谁知道。<br>整个项目使用Maven进行构建吗，使用Springboot进行自动装配，使用HttpClient对网页进行抓取，Jsoup对网页进行解析，数据库连接池使用Druild，还使用了工具类Guava和Commons.lang3。</p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>在sts里面新建一个maven工程，创建如下的包<br><img src="https://i.loli.net/2017/07/15/5969d99e3d9e7.png" alt="项目结构.png"></p>
<ul>
<li>common 一些通用工具类</li>
<li>constant 系统常量</li>
<li>dao 数据库访问层</li>
<li>service 服务层</li>
<li>handler 调度控制层</li>
<li>entity 实体层<br><br><br>这样分层的意义是使得项目结构层次清晰，每层都有着其对应的职责，便于扩展和维护</li>
</ul>
<h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><p>这里使用maven进行构建，还没有了解maven的童鞋自行去了解，使用maven的好处是不用自己导入jar包和完整的生命周期控制，注意，使用阿里云的镜像速度回加快很多。项目的<code>pom.xml</code>文件如下<br><strong>pom.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.exmaple<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spider-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>spider-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">jsoup.version</span>&gt;</span>1.10.3<span class="tag">&lt;/<span class="name">jsoup.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">guava.version</span>&gt;</span>22.0<span class="tag">&lt;/<span class="name">guava.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">lang3.version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">lang3.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.42<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- httpclient --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- jsoup --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jsoup.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- guava --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;guava.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- commons-lang3 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lang3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spider-demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="application-yml文件"><a href="#application-yml文件" class="headerlink" title="application.yml文件"></a>application.yml文件</h3><p>spring boot的配置文件有两种形式，放<code>在src/main/resources</code>目录下，分别是<code>application.yml</code>和<code>application.properties</code><br>这里为了配置更加简洁，使用了<code>application.yml</code>作为我们的配置文件<br><strong>application.yml</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysql</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">    datasource:</span></div><div class="line"><span class="attr">        type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></div><div class="line"><span class="attr">        driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://localhost:3306/spider?useUnicode=true&amp;characterEncoding=UTF-8&amp;&amp;useSSL=true</span></div><div class="line"><span class="attr">        username:</span> <span class="string">root</span></div><div class="line"><span class="attr">        password:</span> <span class="number">123</span></div></pre></td></tr></table></figure></p>
<p>这里可以在url，username和pssword里换成自己环境对应的配置</p>
<h3 id="sql文件"><a href="#sql文件" class="headerlink" title="sql文件"></a>sql文件</h3><p>这里我们创建了一个数据库和一张表，以便后面将商品信息持久化到数据库<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USE</span> spider;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`goods_info`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'ID'</span>,</div><div class="line">  <span class="string">`goods_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品ID'</span>,</div><div class="line">  <span class="string">`goods_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品名称'</span>,</div><div class="line">  <span class="string">`img_url`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品图片地址'</span>,</div><div class="line">  <span class="string">`goods_price`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品标价'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'商品信息表'</span>;</div></pre></td></tr></table></figure></p>
<h2 id="网页的分析"><a href="#网页的分析" class="headerlink" title="网页的分析"></a>网页的分析</h2><h3 id="网址URL的分析"><a href="#网址URL的分析" class="headerlink" title="网址URL的分析"></a>网址URL的分析</h3><p>我们要爬取的网页的URL的基本地址是<code>https://search.jd.com/Search</code><br>我们打开这个网页，在搜索框内搜索零食，我们看一下我们的浏览器的地址栏的URL的变化，发现浏览器的地址栏变成了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div></pre></td><td class="code"><pre><div class="line">我们就可以对参数进行分析，`keyword`和`wq`应该是代表要搜索的关键字，`enc`代表的编码，·`pvid`不知道是什么，我们吧这个参数去掉看能不能访问`https://search.jd.com/Search?keyword=零食&amp;enc=utf-8&amp;wq=零食`，发现这个URL也是可以正常访问到这个网址的，那么我们就可以暂时忽略这个参数，参数就设置就设置`keyword`,`wq`和`enc`</div><div class="line">这里我们要设置的参数就是</div><div class="line">- keyword 零食</div><div class="line">- wq 零食</div><div class="line">- enc utf-8</div><div class="line"></div><div class="line">### 网页内容的分析</div><div class="line">我们打开我们要爬取数据的页面</div><div class="line">![商品.png](https://i.loli.net/2017/07/16/596a4111d104b.png)</div><div class="line">使用浏览器-检查元素</div><div class="line">![商品源代码.png](https://i.loli.net/2017/07/16/596a41e791287.png)</div><div class="line">通过查看源码，我们发现JD的商品列表放在id是J_goodsList的div下的的class是gl-warp clearfix的ul标签的gl-item的li标签下</div><div class="line">再分别审查各个元素，我们发现</div><div class="line">- li标签的data-sku的属性值就是商品的ID</div><div class="line">- li标签下的class为p-name p-name-type-2的em的值就是商品的名称</div><div class="line">- li标签下的class为p-price的strong标签下的i标签的值是商品的价格</div><div class="line">- li标签下的class为p-img的img标签的src值就是商品的图片URL</div><div class="line"></div><div class="line">对网页进行了分析以后，我们就可以通过对DOM结点的选择来筛选我们想要的数据了</div><div class="line"></div><div class="line">## 代码的编写</div><div class="line">这里我们封装了HttpClientUtils作为我们的工具类，以便以后使用</div><div class="line">### HttpClientUtils工具类</div><div class="line">**HttpClient.java**</div><div class="line">```java</div><div class="line">package com.exmaple.spider.common;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Map.Entry;</div><div class="line"></div><div class="line">import org.apache.http.HttpEntity;</div><div class="line">import org.apache.http.NameValuePair;</div><div class="line">import org.apache.http.client.entity.UrlEncodedFormEntity;</div><div class="line">import org.apache.http.client.methods.CloseableHttpResponse;</div><div class="line">import org.apache.http.client.methods.HttpGet;</div><div class="line">import org.apache.http.client.methods.HttpPost;</div><div class="line">import org.apache.http.entity.ContentType;</div><div class="line">import org.apache.http.entity.StringEntity;</div><div class="line">import org.apache.http.impl.client.CloseableHttpClient;</div><div class="line">import org.apache.http.impl.client.HttpClients;</div><div class="line">import org.apache.http.message.BasicNameValuePair;</div><div class="line">import org.apache.http.util.EntityUtils;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line">import com.exmaple.spider.constant.SysConstant;</div><div class="line"></div><div class="line">/**</div><div class="line"> * HttpClient工具类</div><div class="line"> * </div><div class="line"> * @author ZGJ</div><div class="line"> * @date 2017年7月14日</div><div class="line"> */</div><div class="line">public class HttpClientUtils &#123;</div><div class="line"></div><div class="line">	private final static Logger logger = LoggerFactory.getLogger(HttpClientUtils.class);</div><div class="line"></div><div class="line">	private final static String GET_METHOD = &quot;GET&quot;;</div><div class="line">	private final static String POST_METHOD = &quot;POST&quot;;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * GET请求</div><div class="line">	 * </div><div class="line">	 * @param url</div><div class="line">	 *            请求url</div><div class="line">	 * @param headers</div><div class="line">	 *            头部</div><div class="line">	 * @param params</div><div class="line">	 *            参数</div><div class="line">	 * @return</div><div class="line">	 */</div><div class="line">	public static String sendGet(String url, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; params) &#123;</div><div class="line">		// 创建HttpClient对象</div><div class="line">		CloseableHttpClient client = HttpClients.createDefault();</div><div class="line">		StringBuilder reqUrl = new StringBuilder(url);</div><div class="line">		String result = &quot;&quot;;</div><div class="line">		/*</div><div class="line">		 * 设置param参数</div><div class="line">		 */</div><div class="line">		if (params != null &amp;&amp; params.size() &gt; 0) &#123;</div><div class="line">			reqUrl.append(&quot;?&quot;);</div><div class="line">			for (Entry&lt;String, String&gt; param : params.entrySet()) &#123;</div><div class="line">				reqUrl.append(param.getKey() + &quot;=&quot; + param.getValue() + &quot;&amp;&quot;);</div><div class="line">			&#125;</div><div class="line">			url = reqUrl.subSequence(0, reqUrl.length() - 1).toString();</div><div class="line">		&#125;</div><div class="line">		logger.debug(&quot;[url:&quot; + url + &quot;,method:&quot; + GET_METHOD + &quot;]&quot;);</div><div class="line">		HttpGet httpGet = new HttpGet(url);</div><div class="line">		/**</div><div class="line">		 * 设置头部</div><div class="line">		 */</div><div class="line">		logger.debug(&quot;Header\n&quot;);</div><div class="line">		if (headers != null &amp;&amp; headers.size() &gt; 0) &#123;</div><div class="line">			for (Entry&lt;String, String&gt; header : headers.entrySet()) &#123;</div><div class="line">				httpGet.addHeader(header.getKey(), header.getValue());</div><div class="line">				logger.debug(header.getKey() + &quot; : &quot; + header.getValue());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		CloseableHttpResponse response = null;</div><div class="line">		try &#123;</div><div class="line">			response = client.execute(httpGet);</div><div class="line">			/**</div><div class="line">			 * 请求成功</div><div class="line">			 */</div><div class="line">			if (response.getStatusLine().getStatusCode() == 200) &#123;</div><div class="line">				HttpEntity entity = response.getEntity();</div><div class="line">				result = EntityUtils.toString(entity, SysConstant.DEFAULT_CHARSET);</div><div class="line">			&#125;</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			logger.error(&quot;网络请求出错，请检查原因&quot;);</div><div class="line">		&#125; finally &#123;</div><div class="line">			// 关闭资源</div><div class="line">			try &#123;</div><div class="line">				if (response != null) &#123;</div><div class="line">					response.close();</div><div class="line">				&#125;</div><div class="line">				client.close();</div><div class="line">			&#125; catch (IOException e) &#123;</div><div class="line">				logger.error(&quot;网络关闭错误错，请检查原因&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * POST请求</div><div class="line">	 * </div><div class="line">	 * @param url</div><div class="line">	 *            请求url</div><div class="line">	 * @param headers</div><div class="line">	 *            头部</div><div class="line">	 * @param params</div><div class="line">	 *            参数</div><div class="line">	 * @return</div><div class="line">	 */</div><div class="line">	public static String sendPost(String url, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; params) &#123;</div><div class="line">		CloseableHttpClient client = HttpClients.createDefault();</div><div class="line">		String result = &quot;&quot;;</div><div class="line">		HttpPost httpPost = new HttpPost(url);</div><div class="line">		/**</div><div class="line">		 * 设置参数</div><div class="line">		 */</div><div class="line">		if (params != null &amp;&amp; params.size() &gt; 0) &#123;</div><div class="line">			List&lt;NameValuePair&gt; paramList = new ArrayList&lt;&gt;();</div><div class="line">			for (Entry&lt;String, String&gt; param : params.entrySet()) &#123;</div><div class="line">				paramList.add(new BasicNameValuePair(param.getKey(), param.getValue()));</div><div class="line">			&#125;</div><div class="line">			logger.debug(&quot;[url: &quot; + url + &quot;,method: &quot; + POST_METHOD + &quot;]&quot;);</div><div class="line">			// 模拟表单提交</div><div class="line">			try &#123;</div><div class="line">				UrlEncodedFormEntity entity = new UrlEncodedFormEntity(paramList, SysConstant.DEFAULT_CHARSET);</div><div class="line">				httpPost.setEntity(entity);</div><div class="line">			&#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">				logger.error(&quot;不支持的编码&quot;);</div><div class="line">			&#125;</div><div class="line">			/**</div><div class="line">			 * 设置头部</div><div class="line">			 */</div><div class="line">			if (headers != null &amp;&amp; headers.size() &gt; 0) &#123;</div><div class="line">				logger.debug(&quot;Header\n&quot;);</div><div class="line">				if (headers != null &amp;&amp; headers.size() &gt; 0) &#123;</div><div class="line">					for (Entry&lt;String, String&gt; header : headers.entrySet()) &#123;</div><div class="line">						httpPost.addHeader(header.getKey(), header.getValue());</div><div class="line">						logger.debug(header.getKey() + &quot; : &quot; + header.getValue());</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			CloseableHttpResponse response = null;</div><div class="line">			try &#123;</div><div class="line">				response = client.execute(httpPost);</div><div class="line">				HttpEntity entity = response.getEntity();</div><div class="line">				result = EntityUtils.toString(entity, SysConstant.DEFAULT_CHARSET);</div><div class="line">			&#125; catch (IOException e) &#123;</div><div class="line">				logger.error(&quot;网络请求出错，请检查原因&quot;);</div><div class="line">			&#125; finally &#123;</div><div class="line">				try &#123;</div><div class="line">					if (response != null) &#123;</div><div class="line">						response.close();</div><div class="line">					&#125;</div><div class="line">					client.close();</div><div class="line">				&#125; catch (IOException e) &#123;</div><div class="line">					logger.error(&quot;网络关闭错误&quot;);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return result;</div><div class="line">	&#125;</div><div class="line">	/**</div><div class="line">	 * post请求发送json</div><div class="line">	 * @param url</div><div class="line">	 * @param json</div><div class="line">	 * @param headers</div><div class="line">	 * @return</div><div class="line">	 */</div><div class="line">	public static String senPostJson(String url, String json, Map&lt;String, String&gt; headers) &#123;</div><div class="line">		CloseableHttpClient client = HttpClients.createDefault();</div><div class="line">		String result = &quot;&quot;;</div><div class="line">		HttpPost httpPost = new HttpPost(url);</div><div class="line">		StringEntity stringEntity = new StringEntity(json, ContentType.APPLICATION_JSON);</div><div class="line">		httpPost.setEntity(stringEntity);</div><div class="line">		logger.debug(&quot;[url: &quot; + url + &quot;,method: &quot; + POST_METHOD + &quot;, json: &quot; + json + &quot;]&quot;);</div><div class="line">		/**</div><div class="line">		 * 设置头部</div><div class="line">		 */</div><div class="line">		if (headers != null &amp;&amp; headers.size() &gt; 0) &#123;</div><div class="line">			logger.debug(&quot;Header\n&quot;);</div><div class="line">			if (headers != null &amp;&amp; headers.size() &gt; 0) &#123;</div><div class="line">				for (Entry&lt;String, String&gt; header : headers.entrySet()) &#123;</div><div class="line">					httpPost.addHeader(header.getKey(), header.getValue());</div><div class="line">					logger.debug(header.getKey() + &quot; : &quot; + header.getValue());</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		CloseableHttpResponse response = null;</div><div class="line">		try &#123;</div><div class="line">			response = client.execute(httpPost);</div><div class="line">			HttpEntity entity = response.getEntity();</div><div class="line">			result = EntityUtils.toString(entity, SysConstant.DEFAULT_CHARSET);</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			logger.error(&quot;网络请求出错，请检查原因&quot;);</div><div class="line">		&#125; finally &#123;</div><div class="line">			try &#123;</div><div class="line">				if (response != null) &#123;</div><div class="line">					response.close();</div><div class="line">				&#125;</div><div class="line">				client.close();</div><div class="line">			&#125; catch (IOException e) &#123;</div><div class="line">				logger.error(&quot;网络关闭错误&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="SyConstant-java-系统常量"><a href="#SyConstant-java-系统常量" class="headerlink" title="SyConstant.java 系统常量"></a>SyConstant.java 系统常量</h3><p><strong>SysConstant.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.exmaple.spider.constant;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 系统全局常量</div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年7月15日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysConstant</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 系统默认字符集</div><div class="line">	 */</div><div class="line">	String DEFAULT_CHARSET = <span class="string">"utf-8"</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 需要爬取的网站</div><div class="line">	 */</div><div class="line">	String BASE_URL = <span class="string">"https://search.jd.com/Search"</span>;</div><div class="line">	</div><div class="line">	<span class="class"><span class="keyword">interface</span> <span class="title">Header</span> </span>&#123;</div><div class="line">		String ACCEPT = <span class="string">"Accept"</span>;</div><div class="line">		String ACCEPT_ENCODING = <span class="string">"Accept-Encoding"</span>;</div><div class="line">		String ACCEPT_LANGUAGE = <span class="string">"Accept-Language"</span>;</div><div class="line">		String CACHE_CONTROL = <span class="string">"Cache-Controle"</span>;</div><div class="line">		String COOKIE = <span class="string">"Cookie"</span>;</div><div class="line">		String HOST = <span class="string">"Host"</span>;</div><div class="line">		String PROXY_CONNECTION = <span class="string">"Proxy-Connection"</span>;</div><div class="line">		String REFERER = <span class="string">"Referer"</span>;</div><div class="line">		String USER_AGENT = <span class="string">"User-Agent"</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 默认日期格式</div><div class="line">	 */</div><div class="line">	String DEFAULT_DATE_FORMAT = <span class="string">"yyy-MM-dd HH:mm:ss"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="GoodsInfo-商品信息"><a href="#GoodsInfo-商品信息" class="headerlink" title="GoodsInfo 商品信息"></a>GoodsInfo 商品信息</h3><p><strong>GoodsInfo.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.exmaple.spider.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsInfo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String goodsId;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String goodsName;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String imgUrl;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String goodsPrice;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGoodsId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> goodsId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsId</span><span class="params">(String goodsId)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.goodsId = goodsId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGoodsName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> goodsName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsName</span><span class="params">(String goodsName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.goodsName = goodsName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImgUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> imgUrl;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImgUrl</span><span class="params">(String imgUrl)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.imgUrl = imgUrl;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGoodsPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> goodsPrice;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsPrice</span><span class="params">(String goodsPrice)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.goodsPrice = goodsPrice;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">GoodsInfo</span><span class="params">(String goodsId, String goodsName, String imgUrl, String goodsPrice)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.goodsId = goodsId;</div><div class="line">		<span class="keyword">this</span>.goodsName = goodsName;</div><div class="line">		<span class="keyword">this</span>.imgUrl = imgUrl;</div><div class="line">		<span class="keyword">this</span>.goodsPrice = goodsPrice;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="GoodsInfoDao"><a href="#GoodsInfoDao" class="headerlink" title="GoodsInfoDao"></a>GoodsInfoDao</h3><p>因为这里仅仅涉及到把商品信息写入到数据库比较简单的操作，并没有使用MyBatis或者Hibernate框架，只是使用了Spring的JdbcTemplate对数据进行插入操作<br><strong>GoodsInfoDao.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.exmaple.spider.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.exmaple.spider.entity.GoodsInfo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 商品Dao层</div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年7月15日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsInfoDao</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 插入商品信息</div><div class="line">	 * <span class="doctag">@param</span> infos</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">(List&lt;GoodsInfo&gt; infos)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>GoodsInfoDaoImpl.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.exmaple.spider.dao.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.exmaple.spider.dao.GoodsInfoDao;</div><div class="line"><span class="keyword">import</span> com.exmaple.spider.entity.GoodsInfo;</div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsInfoDaoImpl</span> <span class="keyword">implements</span> <span class="title">GoodsInfoDao</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBatch</span><span class="params">(List&lt;GoodsInfo&gt; infos)</span> </span>&#123;</div><div class="line">		String sql = <span class="string">"REPLACE INTO goods_info("</span> + <span class="string">"goods_id,"</span> + <span class="string">"goods_name,"</span> + <span class="string">"goods_price,"</span> + <span class="string">"img_url) "</span></div><div class="line">				+ <span class="string">"VALUES(?,?,?,?)"</span>;</div><div class="line">		<span class="keyword">for</span>(GoodsInfo info : infos) &#123;</div><div class="line">			jdbcTemplate.update(sql, info.getGoodsId(), info.getGoodsName(), info.getGoodsPrice(), info.getImgUrl());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">商品的Dao层实现了向数据库里插入商品信息，使用JdbcTemplate和占位符的方式设置sql语句</div></pre></td></tr></table></figure></p>
<h3 id="SpiderService"><a href="#SpiderService" class="headerlink" title="SpiderService"></a>SpiderService</h3><p><strong>SpiderService.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.exmaple.spider.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</div><div class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</div><div class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</div><div class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"><span class="keyword">import</span> com.exmaple.spider.common.HttpClientUtils;</div><div class="line"><span class="keyword">import</span> com.exmaple.spider.constant.SysConstant;</div><div class="line"><span class="keyword">import</span> com.exmaple.spider.dao.GoodsInfoDao;</div><div class="line"><span class="keyword">import</span> com.exmaple.spider.entity.GoodsInfo;</div><div class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiderService</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(SpiderService.class);</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> GoodsInfoDao goodsInfoDao;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String HTTPS_PROTOCOL = <span class="string">"https:"</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spiderData</span><span class="params">(String url, Map&lt;String, String&gt; params)</span> </span>&#123;</div><div class="line">		String html = HttpClientUtils.sendGet(url, <span class="keyword">null</span>, params);</div><div class="line">		<span class="keyword">if</span>(!StringUtils.isBlank(html)) &#123;</div><div class="line">			List&lt;GoodsInfo&gt; goodsInfos =parseHtml(html);</div><div class="line">			goodsInfoDao.saveBatch(goodsInfos);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 解析html</div><div class="line">	 * <span class="doctag">@param</span> html</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> List&lt;GoodsInfo&gt; <span class="title">parseHtml</span><span class="params">(String html)</span> </span>&#123;</div><div class="line">		<span class="comment">//商品集合</span></div><div class="line">		List&lt;GoodsInfo&gt; goods = Lists.newArrayList();</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 获取dom并解析</div><div class="line">		 */</div><div class="line">		Document document = Jsoup.parse(html);</div><div class="line">		Elements elements = document.</div><div class="line">				select(<span class="string">"ul[class=gl-warp clearfix]"</span>).select(<span class="string">"li[class=gl-item]"</span>);</div><div class="line">		<span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(Element element : elements) &#123;</div><div class="line">			String goodsId = element.attr(<span class="string">"data-sku"</span>);</div><div class="line">			String goodsName = element.select(<span class="string">"div[class=p-name p-name-type-2]"</span>).select(<span class="string">"em"</span>).text();</div><div class="line">			String goodsPrice = element.select(<span class="string">"div[class=p-price]"</span>).select(<span class="string">"strong"</span>).select(<span class="string">"i"</span>).text();</div><div class="line">			String imgUrl = HTTPS_PROTOCOL + element.select(<span class="string">"div[class=p-img]"</span>).select(<span class="string">"a"</span>).select(<span class="string">"img"</span>).attr(<span class="string">"src"</span>);</div><div class="line">			GoodsInfo goodsInfo = <span class="keyword">new</span> GoodsInfo(goodsId, goodsName, imgUrl, goodsPrice);</div><div class="line">			goods.add(goodsInfo);</div><div class="line">			String jsonStr = JSON.toJSONString(goodsInfo);</div><div class="line">			logger.info(<span class="string">"成功爬取【"</span> + goodsName + <span class="string">"】的基本信息 "</span>);</div><div class="line">			logger.info(jsonStr);</div><div class="line">			<span class="keyword">if</span>(index ++ == <span class="number">9</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> goods;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Service层通过使用HttpClientUtils模拟浏览器访问页面，然后再使用Jsoup对页面进行解析，Jsoup的使用和Jquery的DOM结点选取基本相似，可以看作是java版的Jquery，如果写过Jquery的人基本上就可以看出是什么意思。<br>每抓取一条信息就会打印一次记录，而且使用fastjson将对象转换成json字符串并输出<br>在写测试代码的时候发现，发现爬取的数据只有前10条是完整的，后面的爬取的有些是不完整的，按道理来说是对于整个页面都是通用的，就是不知道为什么只有前面才是完整的，排查了很久没用发现原因，这里就只选择了前面的10条作为要爬取的数据<br>我们了解到，我们要爬取数据前要分析我们要爬取的数据有哪些，再分析网友的结构，然后对网页进行解析，选取对应的DOM或者使用正则表达式筛选，思路首先要清晰，有了思路之后剩下的也只是把你的思路翻译成代码而已了。</p>
<h3 id="SpiderHandler"><a href="#SpiderHandler" class="headerlink" title="SpiderHandler"></a>SpiderHandler</h3><p><strong>SpiderHandler.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.exmaple.spider.handler;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.time.FastDateFormat;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.exmaple.spider.constant.SysConstant;</div><div class="line"><span class="keyword">import</span> com.exmaple.spider.service.SpiderService;</div><div class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 爬虫调度处理器</div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年7月15日</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiderHandler</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> SpiderService spiderService;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SpiderHandler.class);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spiderData</span><span class="params">()</span> </span>&#123;</div><div class="line">		logger.info(<span class="string">"爬虫开始...."</span>);</div><div class="line">		Date startDate = <span class="keyword">new</span> Date();</div><div class="line">		<span class="comment">// 使用现线程池提交任务</span></div><div class="line">		ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line">		<span class="comment">//引入countDownLatch进行线程同步，使主线程等待线程池的所有任务结束，便于计时</span></div><div class="line">		CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">100</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">201</span>; i += <span class="number">2</span>) &#123;</div><div class="line">			Map&lt;String, String&gt; params = Maps.newHashMap();</div><div class="line">			params.put(<span class="string">"keyword"</span>, <span class="string">"零食"</span>);</div><div class="line">			params.put(<span class="string">"enc"</span>, <span class="string">"utf-8"</span>);</div><div class="line">			params.put(<span class="string">"wc"</span>, <span class="string">"零食"</span>);</div><div class="line">			params.put(<span class="string">"page"</span>, i + <span class="string">""</span>);</div><div class="line">			executorService.submit(() -&gt; &#123;</div><div class="line">				spiderService.spiderData(SysConstant.BASE_URL, params);</div><div class="line">				countDownLatch.countDown();</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			countDownLatch.await();</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		executorService.shutdown();</div><div class="line">		Date endDate = <span class="keyword">new</span> Date();</div><div class="line"></div><div class="line">		FastDateFormat fdf = FastDateFormat.getInstance(SysConstant.DEFAULT_DATE_FORMAT);</div><div class="line">		logger.info(<span class="string">"爬虫结束...."</span>);</div><div class="line">		logger.info(<span class="string">"[开始时间:"</span> + fdf.format(startDate) + <span class="string">",结束时间:"</span> + fdf.format(endDate) + <span class="string">",耗时:"</span></div><div class="line">				+ (endDate.getTime() - startDate.getTime()) + <span class="string">"ms]"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SpiderHandelr作为一个爬虫服务调度处理器，这里采用了<code>ExecutorService</code>线程池创建了5个线程进行多线程爬取，我们通过翻页发现，翻页过后地址URL多了一个<code>page</code>参数，而且这个参数还只能是奇数才有效，也就是<code>page</code>为1,3，5,7……代表第1,2,3,4……页。这里就只爬了100页，每页10条数据，将<code>page</code>作为不同的参数传给不同的任务。<br>这里我想统计一下整个爬取任务所用的时间，假如不使用同步工具类的话，因为任务是分到线程池中去运行的，而主线程会继续执行下去，主线程和线程池中的线程是独立运行的，主线程会提前结束，所以就无法统计时间。<br>这里我们使用CountDownLatch同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。也就是说可以让主线程等待线程池内的线程执行结束再继续执行，里面维护了一个计数器，开始的时候构造计数器的初始数量，每个线程执行结束的时候调用countdown()方法，计数器就减1，调用await()方法，假如计数器不为0就会阻塞，假如计数器为0了就可以继续往下执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">executorService.submit(() -&gt; &#123;</div><div class="line">	spiderService.spiderData(SysConstant.BASE_URL, params);</div><div class="line">	countDownLatch.countDown();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这里使用了Java8中的lambda表达式替代了匿名内部类，详细的可以自行去了解<br>这里还可以根据自己的业务需求做一些代码的调整和优化，比如实现定时任务爬取等等</p>
<h3 id="App-java"><a href="#App-java" class="headerlink" title="App.java"></a>App.java</h3><p><strong>App.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.exmaple.spider;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.exmaple.spider.handler.SpiderHandler;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> SpiderHandler spiderHandler;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		SpringApplication.run(App.class, args);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@PostConstruct</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</div><div class="line">		spiderHandler.spiderData();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用<code>@PostConstruct</code>注解会在spring容器实例化bean之前执行这个方法</p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>我们以Spring Boot App的方式运行App.java文件，得到的结果如下：<br><img src="https://i.loli.net/2017/07/16/596a4c45cdc24.png" alt="爬取信息.png"><br>我们在看一下数据库内的信息<br><img src="https://i.loli.net/2017/07/16/596a4c44de164.png" alt="数据库记录.png"><br>发现数据库也有信息了，大功告成</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写一个简单的爬虫其实也不难，但是其中也有不少的知识点需要梳理和记忆，发现问题或者是错误，查google，查文档，一点点debug去调试，最终把问题一点点的解决，编程其实需要是解决问题的能力，这种的能力的锻炼需要我们去多写代码，写完了代码之后还要多思考，思考为什么要这样写？还有没有更好的实现方式？为什么会出问题？需要怎么解决？这才是一名优秀的程序员应该养成的习惯，共勉！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;网络爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。爬虫可以通过模拟浏览器访问网页，从而获取数据，一般网页里会有很多个URL,爬虫可以访问这些URL到达其他网页，相当于形成了一种数据结构——图，我们通过广度优先搜索和深度优先搜索的方式来遍历这个图，从而做到不断爬取数据的目的。最近准备做一个电商网站，商品的原型就打算从一些电商网站上爬取，这里使用了HttpClient和Jsoup实现了一个简答的爬取商品的demo,采用了多线程的方式，并将爬取的数据持久化到了数据库。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zgj12138.github.io/blog/categories/Java/"/>
    
    
      <category term="爬虫" scheme="https://zgj12138.github.io/blog/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="java" scheme="https://zgj12138.github.io/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Redis集群的原理的搭建</title>
    <link href="https://zgj12138.github.io/blog/2017/07/08/Redis%E9%9B%86%E7%BE%A4/"/>
    <id>https://zgj12138.github.io/blog/2017/07/08/Redis集群/</id>
    <published>2017-07-08T12:00:21.000Z</published>
    <updated>2017-07-08T12:54:08.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis 是我们目前大规模使用的缓存中间件，由于它强大高效而又便捷的功能，得到了广泛的使用。单节点的Redis已经就达到了很高的性能，为了提高可用性我们可以使用Redis集群。本文参考了Rdis的官方文档和使用Redis官方提供的Redis Cluster工具搭建Rdis集群。</p>
<p><strong>注意</strong> ：Redis的版本要在3.0以上,截止今天，Redis的版本是3.2.9，本教程也使用3.2.9作为教程<br><a id="more"></a></p>
<h2 id="Redis集群的概念"><a href="#Redis集群的概念" class="headerlink" title="Redis集群的概念"></a>Redis集群的概念</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Redis 集群是一个可以在多个 Redis 节点之间进行数据共享的设施（installation）。</p>
<p>Redis 集群不支持那些需要同时处理多个键的 Redis 命令， 因为执行这些命令需要在多个 Redis 节点之间移动数据， 并且在高负载的情况下， 这些命令将降低 Redis 集群的性能， 并导致不可预测的错误。</p>
<p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p>
<p>Redis 集群提供了以下两个好处：</p>
<ul>
<li>将数据自动切分（split）到多个节点的能力。</li>
<li>当集群中的一部分节点失效或者无法进行通讯时， 仍然可以继续处理命令请求的能力。</li>
</ul>
<h3 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h3><p>Redis 集群使用数据分片（sharding）而非一致性哈希（consistency hashing）来实现： 一个 Redis 集群包含 16384 个哈希槽（hash slot）， 数据库中的每个键都属于这 16384 个哈希槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p>
<p>集群中的每个节点负责处理一部分哈希槽。 举个例子， 一个集群可以有三个哈希槽， 其中：</p>
<ul>
<li>节点 A 负责处理 0 号至 5500 号哈希槽。</li>
<li>节点 B 负责处理 5501 号至 11000 号哈希槽。</li>
<li>节点 C 负责处理 11001 号至 16384 号哈希槽。</li>
</ul>
<p>这种将哈希槽分布到不同节点的做法使得用户可以很容易地向集群中添加或者删除节点。 比如说：<br>我现在想设置一个key,叫<code>my_name</code>:</p>
<p><code>set my_name zhangguoji</code></p>
<p>按照Redis Cluster的哈希槽算法，<code>CRC16(&#39;my_name&#39;)%16384 = 2412</code> 那么这个key就被分配到了节点A上<br>同样的，当我连接(A,B,C)的任意一个节点想获取<code>my_name</code>这个key,都会转到节点A上<br>再比如<br>如果用户将新节点 D 添加到集群中， 那么集群只需要将节点 A 、B 、 C 中的某些槽移动到节点 D 就可以了。<br>增加一个D节点的结果可能如下：</p>
<ul>
<li>节点A覆盖1365-5460</li>
<li>节点B覆盖6827-10922</li>
<li>节点C覆盖12288-16383</li>
<li>节点D覆盖0-1364,5461-6826,10923-1228</li>
</ul>
<p>与此类似， 如果用户要从集群中移除节点 A ， 那么集群只需要将节点 A 中的所有哈希槽移动到节点 B 和节点 C ， 然后再移除空白（不包含任何哈希槽）的节点 A 就可以了。<br>因为将一个哈希槽从一个节点移动到另一个节点不会造成节点阻塞， 所以无论是添加新节点还是移除已存在节点， 又或者改变某个节点包含的哈希槽数量， 都不会造成集群下线。<br>所以,Redis Cluster的模型大概是这样的形状<br><img src="https://ooo.0o0.ooo/2017/07/06/595dab1f2378b.jpg" alt="082248582749859.jpg"></p>
<h3 id="主从复制模型"><a href="#主从复制模型" class="headerlink" title="主从复制模型"></a>主从复制模型</h3><p>为了使得集群在一部分节点下线或者无法与集群的大多数（majority）节点进行通讯的情况下， 仍然可以正常运作， Redis 集群对节点使用了主从复制功能： 集群中的每个节点都有 1 个至 N 个复制品（replica）， 其中一个复制品为主节点（master）， 而其余的 N-1 个复制品为从节点（slave）。</p>
<p>在之前列举的节点 A 、B 、C 的例子中， 如果节点 B 下线了， 那么集群将无法正常运行， 因为集群找不到节点来处理 5501 号至 11000号的哈希槽。</p>
<p>另一方面， 假如在创建集群的时候（或者至少在节点 B 下线之前）， 我们为主节点 B 添加了从节点 B1 ， 那么当主节点 B 下线的时候， 集群就会将 B1 设置为新的主节点， 并让它代替下线的主节点 B ， 继续处理 5501 号至 11000 号的哈希槽， 这样集群就不会因为主节点 B 的下线而无法正常运作了。</p>
<p>不过如果节点 B 和 B1 都下线的话， Redis 集群还是会停止运作。</p>
<h2 id="Redis一致性保证"><a href="#Redis一致性保证" class="headerlink" title="Redis一致性保证"></a>Redis一致性保证</h2><p>Redis 并不能保证数据的强一致性. 这意味这在实际中集群在特定的条件下可能会丢失写操作：<br>第一个原因是因为集群是用了异步复制. 写操作过程:</p>
<ol>
<li>客户端向主节点B写入一条命令.</li>
<li>主节点B向客户端回复命令状态.</li>
<li>主节点将写操作复制给他得从节点 B1, B2 和 B3</li>
</ol>
<p>主节点对命令的复制工作发生在返回命令回复之后， 因为如果每次处理命令请求都需要等待复制操作完成的话， 那么主节点处理命令请求的速度将极大地降低 —— 我们必须在性能和一致性之间做出权衡。 注意：Redis 集群可能会在将来提供同步写的方法。 Redis 集群另外一种可能会丢失命令的情况是集群出现了网络分区， 并且一个客户端与至少包括一个主节点在内的少数实例被孤立。<br>举个例子 假设集群包含 A 、 B 、 C 、 A1 、 B1 、 C1 六个节点， 其中 A 、B 、C 为主节点， A1 、B1 、C1 为A，B，C的从节点， 还有一个客户端 Z1 假设集群中发生网络分区，那么集群可能会分为两方，大部分的一方包含节点 A 、C 、A1 、B1 和 C1 ，小部分的一方则包含节点 B 和客户端 Z1 .<br>Z1仍然能够向主节点B中写入, 如果网络分区发生时间较短,那么集群将会继续正常运作,如果分区的时间足够让大部分的一方将B1选举为新的master，那么Z1写入B中得数据便丢失了.<br>注意， 在网络分裂出现期间， 客户端 Z1 可以向主节点 B 发送写命令的最大时间是有限制的， 这一时间限制称为节点超时时间（node timeout）， 是 Redis 集群的一个重要的配置选项</p>
<h2 id="搭建Redis集群"><a href="#搭建Redis集群" class="headerlink" title="搭建Redis集群"></a>搭建Redis集群</h2><p>要让集群正常工作至少需要3个主节点，在这里我们要创建6个redis节点，其中三个为主节点，三个为从节点，对应的redis节点的ip和端口对应关系如下（为了简单演示都在同一台机器上面）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:7000</div><div class="line"></div><div class="line">127.0.0.1:7001</div><div class="line"></div><div class="line">127.0.0.1:7002</div><div class="line"></div><div class="line">127.0.0.1:7003</div><div class="line"></div><div class="line">127.0.0.1:7004</div><div class="line"></div><div class="line">127.0.0.1:7005</div></pre></td></tr></table></figure></p>
<h3 id="安装和启动Redis"><a href="#安装和启动Redis" class="headerlink" title="安装和启动Redis"></a>安装和启动Redis</h3><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-3.2.9.tar.gz</div></pre></td></tr></table></figure>
<h4 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar zxvf redis-3.2.9.tar.gz</div><div class="line">cd redis-3.2.9</div><div class="line">make &amp;&amp; make PREFIX=/usr/local/redis install</div></pre></td></tr></table></figure>
<p>  这里如果失败的自行yum安装gcc和tcl<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install gcc</div><div class="line">yum install tcl</div></pre></td></tr></table></figure></p>
<h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/redis</div><div class="line">mkdir cluster</div><div class="line">cd cluster</div><div class="line">mkdir 7000 7001 7002 7003 7004 7005</div></pre></td></tr></table></figure>
<h4 id="复制和修改配置文件"><a href="#复制和修改配置文件" class="headerlink" title="复制和修改配置文件"></a>复制和修改配置文件</h4><p>将redis目录下的配置文件复制到对应端口文件夹下,6个文件夹都要复制一份<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp redis-3.2.9/redis.conf /usr/local/redis/cluster/7000</div></pre></td></tr></table></figure></p>
<p>修改配置文件<code>redis.conf</code>，将下面的选项修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 端口号</div><div class="line">port 7000</div><div class="line"># 后台启动</div><div class="line">daemonize yes</div><div class="line"># 开启集群</div><div class="line">cluster-enabled yes</div><div class="line">#集群节点配置文件</div><div class="line">cluster-config-file nodes-7000.conf</div><div class="line"># 集群连接超时时间</div><div class="line">cluster-node-timeout 5000</div><div class="line"># 进程pid的文件位置</div><div class="line">pidfile /var/run/redis-7000.pid</div><div class="line"># 开启aof</div><div class="line">appendonly yes</div><div class="line"># aof文件路径</div><div class="line">appendfilename &quot;appendonly-7005.aof&quot;</div><div class="line"># rdb文件路径</div><div class="line">dbfilename dump-7000.rdb</div></pre></td></tr></table></figure></p>
<p>6个配置文件安装对应的端口分别修改配置文件</p>
<h4 id="创建启动脚本"><a href="#创建启动脚本" class="headerlink" title="创建启动脚本"></a>创建启动脚本</h4><p>在<code>/usr/local/redis</code>目录下创建一个start.sh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">bin/redis-server cluster/7000/redis.conf</div><div class="line">bin/redis-server cluster/7001/redis.conf</div><div class="line">bin/redis-server cluster/7002/redis.conf</div><div class="line">bin/redis-server cluster/7003/redis.conf</div><div class="line">bin/redis-server cluster/7004/redis.conf</div><div class="line">bin/redis-server cluster/7005/redis.conf</div></pre></td></tr></table></figure></p>
<p>这个时候我们查看一下进程看启动情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep redis</div></pre></td></tr></table></figure></p>
<p>进程状态如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root      1731     1  1 18:21 ?        00:00:49 bin/redis-server *:7000 [cluster]       </div><div class="line">root      1733     1  0 18:21 ?        00:00:29 bin/redis-server *:7001 [cluster]       </div><div class="line">root      1735     1  0 18:21 ?        00:00:08 bin/redis-server *:7002 [cluster]       </div><div class="line">root      1743     1  0 18:21 ?        00:00:26 bin/redis-server *:7003 [cluster]       </div><div class="line">root      1745     1  0 18:21 ?        00:00:13 bin/redis-server *:7004 [cluster]       </div><div class="line">root      1749     1  0 18:21 ?        00:00:08 bin/redis-server *:7005 [cluster]</div></pre></td></tr></table></figure></p>
<p>有6个redis进程在开启，说明我们的redis就启动成功了</p>
<h3 id="开启集群"><a href="#开启集群" class="headerlink" title="开启集群"></a>开启集群</h3><p>这里我们只是开启了6个redis进程而已，它们都还只是独立的状态，还么有组成集群<br>这里我们使用官方提供的工具redis-trib，不过这个工具是用ruby写的，要先安装ruby的环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ruby rubygems -y</div></pre></td></tr></table></figure></p>
<p>执行，报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@centos]# redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005</div><div class="line">/usr/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in `gem_original_require&apos;: no such file to load -- redis (LoadError)</div><div class="line">    from /usr/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in `require&apos;</div><div class="line">    from /usr/local/bin/redis-trib.rb:25</div><div class="line">[root@centos]#</div></pre></td></tr></table></figure></p>
<p>原来是ruby和redis的连接没安装好<br>安装gem-redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install redis</div></pre></td></tr></table></figure></p>
<p>安装到这里的时候突然卡住很久不动，网上搜了下，这里需要翻墙或者换镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem source -a https://gems.ruby-china.org</div></pre></td></tr></table></figure></p>
<p>这里可以将镜像换成ruby-china的镜像，不过我好像更换失败，最终还是翻墙下载了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@centos]# gem install redis</div><div class="line">Successfully installed redis-3.2.1</div><div class="line">1 gem installed</div><div class="line">Installing ri documentation for redis-3.2.1...</div><div class="line">Installing RDoc documentation for redis-3.2.1...</div></pre></td></tr></table></figure></p>
<p>等下载好后我们就可以使用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@centos]# gem install redis</div><div class="line">Successfully installed redis-3.2.1</div><div class="line">1 gem installed</div><div class="line">Installing ri documentation for redis-3.2.1...</div><div class="line">Installing RDoc documentation for redis-3.2.1...</div></pre></td></tr></table></figure></p>
<p>将redis-3.2.9的src目录下的trib复制到相应文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp redis-3.2.9/src/redis-trib.rb /usr/local/redis/bin/redis-trib</div></pre></td></tr></table></figure></p>
<p>创建集群：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-trib create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005</div></pre></td></tr></table></figure></p>
<p>命令的意义如下：</p>
<ul>
<li>给定 redis-trib.rb 程序的命令是 create ， 这表示我们希望创建一个新的集群。</li>
<li>选项 –replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。<br>之后跟着的其他参数则是实例的地址列表， 我们希望程序使用这些地址所指示的实例来创建新集群。<br>简单来说，以上的命令的意思就是让redis-trib程序帮我们创建三个主节点和三个从节点的集群<br>接着， redis-trib 会打印出一份预想中的配置给你看， 如果你觉得没问题的话， 就可以输入 yes ， redis-trib 就会将这份配置应用到集群当中：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Creating cluster</div><div class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</div><div class="line">Using 3 masters:</div><div class="line">127.0.0.1:7000</div><div class="line">127.0.0.1:7001</div><div class="line">127.0.0.1:7002</div><div class="line">Adding replica 127.0.0.1:7003 to 127.0.0.1:7000</div><div class="line">Adding replica 127.0.0.1:7004 to 127.0.0.1:7001</div><div class="line">Adding replica 127.0.0.1:7005 to 127.0.0.1:7002</div><div class="line">M: bdcddddd3d78a866b44b68c7ae0e5ccf875c446a 127.0.0.1:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">M: b85519795fa42aa33d4e88d25104cbae895933a6 127.0.0.1:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">M: b681e1a151890cbf957d1ff08352ee48f6ae39e6 127.0.0.1:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">S: d403713ab9db48aeac5b5393b69e1201026ef479 127.0.0.1:7003</div><div class="line">   replicates bdcddddd3d78a866b44b68c7ae0e5ccf875c446a</div><div class="line">S: b7ec92919e5bcffa76c8eee338f8ca5155293c64 127.0.0.1:7004</div><div class="line">   replicates b85519795fa42aa33d4e88d25104cbae895933a6</div><div class="line">S: 8a0d2a3f271b349744a971e1b0a545405de2742e 127.0.0.1:7005</div><div class="line">   replicates b681e1a151890cbf957d1ff08352ee48f6ae39e6</div><div class="line">Can I set the above configuration? (type &apos;yes&apos; to accept):</div></pre></td></tr></table></figure>
<p>按下yes，集群就会将配置应用到各个节点，并连接起（join)各个节点，也即是，让各个节点开始通讯<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Nodes configuration updated</div><div class="line">&gt;&gt;&gt; Assign a different config epoch to each node</div><div class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</div><div class="line">Waiting for the cluster to join...</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7000)</div><div class="line">M: bdcddddd3d78a866b44b68c7ae0e5ccf875c446a 127.0.0.1:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: d403713ab9db48aeac5b5393b69e1201026ef479 127.0.0.1:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates bdcddddd3d78a866b44b68c7ae0e5ccf875c446a</div><div class="line">S: 8a0d2a3f271b349744a971e1b0a545405de2742e 127.0.0.1:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b681e1a151890cbf957d1ff08352ee48f6ae39e6</div><div class="line">M: b85519795fa42aa33d4e88d25104cbae895933a6 127.0.0.1:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: b7ec92919e5bcffa76c8eee338f8ca5155293c64 127.0.0.1:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b85519795fa42aa33d4e88d25104cbae895933a6</div><div class="line">M: b681e1a151890cbf957d1ff08352ee48f6ae39e6 127.0.0.1:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure></p>
<h2 id="Redis集群的使用"><a href="#Redis集群的使用" class="headerlink" title="Redis集群的使用"></a>Redis集群的使用</h2><h3 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h3><p>这里我们使用reids-cli连接集群，使用时加上<code>-c</code>参数，就可以连接到集群<br>连接7000端口的节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@centos1 redis]# ./redis-cli -c -p 7000</div><div class="line">127.0.0.1:7000&gt; set name zgj</div><div class="line">-&gt; Redirected to slot [5798] located at 127.0.0.1:7001</div><div class="line">OK</div><div class="line">127.0.0.1:7001&gt; get name</div><div class="line">&quot;zgj&quot;</div></pre></td></tr></table></figure></p>
<p>前面的理论知识我们知道了，分配key的时候，它会使用<code>CRC16</code>算法，这里将key<code>name</code>分配到了7001节点上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Redirected to slot [5798] located at 127.0.0.1:7001</div></pre></td></tr></table></figure>
<p>redis cluster 采用的方式很直接，它直接跳转到7001 节点了，而不是还在自身的7000节点。</p>
<p>好，现在我们连接7003这个从节点进入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@centos1 redis]# ./redis-cli -c -p 7003</div><div class="line">127.0.0.1:7003&gt; get name</div><div class="line">-&gt; Redirected to slot [5798] located at 127.0.0.1:7001</div><div class="line">&quot;zgj&quot;</div></pre></td></tr></table></figure></p>
<p>这里获取<code>name</code>的值，也同样跳转到了7001上<br>我们再测试一下其他数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:7001&gt; set age 20</div><div class="line">-&gt; Redirected to slot [741] located at 127.0.0.1:7000</div><div class="line">OK</div><div class="line">127.0.0.1:7000&gt; set message helloworld</div><div class="line">-&gt; Redirected to slot [11537] located at 127.0.0.1:7002</div><div class="line">OK</div><div class="line">127.0.0.1:7002&gt; set height 175</div><div class="line">-&gt; Redirected to slot [8223] located at 127.0.0.1:7001</div><div class="line">OK</div></pre></td></tr></table></figure></p>
<p>我们发现数据会在7000-7002这3个节点之间来回跳转</p>
<h3 id="测试集群中的节点挂掉"><a href="#测试集群中的节点挂掉" class="headerlink" title="测试集群中的节点挂掉"></a>测试集群中的节点挂掉</h3><p>上面我们建立了一个集群，3个主节点和3个从节点，7000-7002负责存取数据，7003-7005负责把7000-7005的数据同步到自己的节点上来。<br>我们现在来模拟一下一台matser服务器宕机的情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@centos1 redis]# ps -ef | grep redis</div><div class="line">root      1731     1  0 18:21 ?        00:01:02 bin/redis-server *:7000 [cluster]       </div><div class="line">root      1733     1  0 18:21 ?        00:00:43 bin/redis-server *:7001 [cluster]       </div><div class="line">root      1735     1  0 18:21 ?        00:00:22 bin/redis-server *:7002 [cluster]       </div><div class="line">root      1743     1  0 18:21 ?        00:00:40 bin/redis-server *:7003 [cluster]       </div><div class="line">root      1745     1  0 18:21 ?        00:00:27 bin/redis-server *:7004 [cluster]       </div><div class="line">root      1749     1  0 18:21 ?        00:00:22 bin/redis-server *:7005 [cluster]       </div><div class="line">root     23988     1  0 18:30 ?        00:00:42 ./redis-server *:6379    </div><div class="line">root     24491  1635  0 21:55 pts/1    00:00:00 grep redis</div><div class="line">[root@centos1 redis]# kill 1731</div><div class="line">[root@centos1 redis]# bin/redis-trib check 127.0.0.1:7001</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7001)</div><div class="line">M: b85519795fa42aa33d4e88d25104cbae895933a6 127.0.0.1:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: b681e1a151890cbf957d1ff08352ee48f6ae39e6 127.0.0.1:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: b7ec92919e5bcffa76c8eee338f8ca5155293c64 127.0.0.1:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b85519795fa42aa33d4e88d25104cbae895933a6</div><div class="line">S: 8a0d2a3f271b349744a971e1b0a545405de2742e 127.0.0.1:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b681e1a151890cbf957d1ff08352ee48f6ae39e6</div><div class="line">M: d403713ab9db48aeac5b5393b69e1201026ef479 127.0.0.1:7003</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   0 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<p>这里看得出来，现在已经有了3个节点了，7003被选取成了替代7000成为主节点了。<br>我们再来模拟 7000节点重新启动了的情况，那么它还会自动加入到集群中吗？那么，7000这个节点上充当什么角色呢？ 我们试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[root@centos1 redis]# bin/redis-server cluster/7000/redis.conf</div><div class="line">[root@centos1 redis]# bin/redis-trib check 127.0.0.1:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7000)</div><div class="line">S: bdcddddd3d78a866b44b68c7ae0e5ccf875c446a 127.0.0.1:7000</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates d403713ab9db48aeac5b5393b69e1201026ef479</div><div class="line">S: b7ec92919e5bcffa76c8eee338f8ca5155293c64 127.0.0.1:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b85519795fa42aa33d4e88d25104cbae895933a6</div><div class="line">S: 8a0d2a3f271b349744a971e1b0a545405de2742e 127.0.0.1:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b681e1a151890cbf957d1ff08352ee48f6ae39e6</div><div class="line">M: b681e1a151890cbf957d1ff08352ee48f6ae39e6 127.0.0.1:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: b85519795fa42aa33d4e88d25104cbae895933a6 127.0.0.1:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: d403713ab9db48aeac5b5393b69e1201026ef479 127.0.0.1:7003</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure></p>
<p>这里我们可以看到7000节点变成了7003节点的从节点<br>我们试着将7000和7003两个节点都关掉</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root@centos1 redis]# ps -ef | grep redis</div><div class="line">root      1733     1  0 18:21 ?        00:00:45 bin/redis-server *:7001 [cluster]       </div><div class="line">root      1735     1  0 18:21 ?        00:00:24 bin/redis-server *:7002 [cluster]       </div><div class="line">root      1743     1  0 18:21 ?        00:00:42 bin/redis-server *:7003 [cluster]       </div><div class="line">root      1745     1  0 18:21 ?        00:00:29 bin/redis-server *:7004 [cluster]       </div><div class="line">root      1749     1  0 18:21 ?        00:00:24 bin/redis-server *:7005 [cluster]       </div><div class="line">root     23988     1  0 18:30 ?        00:00:43 ./redis-server *:6379    </div><div class="line">root     24527     1  0 22:04 ?        00:00:00 bin/redis-server *:7000 [cluster]       </div><div class="line">root     24541  1635  0 22:07 pts/1    00:00:00 grep redis</div><div class="line">[root@centos1 redis] kill 1743</div><div class="line">[root@centos1 redis] kill 24527</div><div class="line"></div><div class="line">[root@centos1 redis]# bin/redis-trib check 127.0.0.1:7001</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7001)</div><div class="line">M: b85519795fa42aa33d4e88d25104cbae895933a6 127.0.0.1:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: b681e1a151890cbf957d1ff08352ee48f6ae39e6 127.0.0.1:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: b7ec92919e5bcffa76c8eee338f8ca5155293c64 127.0.0.1:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b85519795fa42aa33d4e88d25104cbae895933a6</div><div class="line">S: 8a0d2a3f271b349744a971e1b0a545405de2742e 127.0.0.1:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b681e1a151890cbf957d1ff08352ee48f6ae39e6</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[ERR] Not all 16384 slots are covered by nodes.</div></pre></td></tr></table></figure>
<p>这里我们的集群就不能工作了，因为两个节点主节点和从节点都挂掉了，原来7001分配的slot现在无节点接管，需要人工介入重新分配slots。</p>
<h3 id="集群中加入新的主节点"><a href="#集群中加入新的主节点" class="headerlink" title="集群中加入新的主节点"></a>集群中加入新的主节点</h3><p>这里在cluster目录下再新建一个7006并修改对应的配置文件，然后启动这个这个redis进程<br>然后再使用redis-trib的<code>add node</code>指令加入节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/redis-trib add-node 127.0.0.1:7006 127.0.0.1:7000</div></pre></td></tr></table></figure></p>
<p>这里前面的节点表示要加入的节点，第二个节点表示要加入的集群中的任意一个节点，用来标识这个集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">[root@centos1 redis]# bin/redis-trib add-node 127.0.0.1:7006 127.0.0.1:7000</div><div class="line">&gt;&gt;&gt; Adding node 127.0.0.1:7006 to cluster 127.0.0.1:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7000)</div><div class="line">M: bdcddddd3d78a866b44b68c7ae0e5ccf875c446a 127.0.0.1:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: d403713ab9db48aeac5b5393b69e1201026ef479 127.0.0.1:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates bdcddddd3d78a866b44b68c7ae0e5ccf875c446a</div><div class="line">S: b7ec92919e5bcffa76c8eee338f8ca5155293c64 127.0.0.1:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b85519795fa42aa33d4e88d25104cbae895933a6</div><div class="line">M: b85519795fa42aa33d4e88d25104cbae895933a6 127.0.0.1:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 8a0d2a3f271b349744a971e1b0a545405de2742e 127.0.0.1:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b681e1a151890cbf957d1ff08352ee48f6ae39e6</div><div class="line">M: b681e1a151890cbf957d1ff08352ee48f6ae39e6 127.0.0.1:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 127.0.0.1:7006 to make it join the cluster.</div><div class="line">[OK] New node added correctly.</div><div class="line">[root@centos1 redis]# bin/redis-trib check 127.0.0.1:7006</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7000)</div><div class="line">M: bdcddddd3d78a866b44b68c7ae0e5ccf875c446a 127.0.0.1:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: d403713ab9db48aeac5b5393b69e1201026ef479 127.0.0.1:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates bdcddddd3d78a866b44b68c7ae0e5ccf875c446a</div><div class="line">S: b7ec92919e5bcffa76c8eee338f8ca5155293c64 127.0.0.1:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b85519795fa42aa33d4e88d25104cbae895933a6</div><div class="line">M: e55599320dabfb31bd22a01407e66121f075e7d3 127.0.0.1:7006</div><div class="line">   slots: (0 slots) master</div><div class="line">   0 additional replica(s)</div><div class="line">M: b85519795fa42aa33d4e88d25104cbae895933a6 127.0.0.1:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 8a0d2a3f271b349744a971e1b0a545405de2742e 127.0.0.1:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b681e1a151890cbf957d1ff08352ee48f6ae39e6</div><div class="line">M: b681e1a151890cbf957d1ff08352ee48f6ae39e6 127.0.0.1:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure></p>
<p>这里我们可以看到7006节点已经变成了一个主节点，然鹅，等等，好像发现了有什么地方不对<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">M: e55599320dabfb31bd22a01407e66121f075e7d3 127.0.0.1:7006</div><div class="line">   slots: (0 slots) master</div></pre></td></tr></table></figure></p>
<p>里面<code>0 slots</code>,也就是说节点6没有分配哈希槽，即不能进行数据的存取，拿我加上去干嘛。。<br>原来redis cluster 不是在新加节点的时候帮我们做好了迁移工作，需要我们手动对集群进行重新分片迁移，也是这个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/redis-trib reshard 127.0.0.1:7000</div></pre></td></tr></table></figure></p>
<p>这个命令是用来迁移slot节点的，后面的127.0.0.1:7000是表示哪个集群的，7000-7006都是可以的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[root@centos1]# redis-trib.rb reshard 127.0.0.1:7000</div><div class="line">Connecting to node 127.0.0.1:7006: OK</div><div class="line">Connecting to node 127.0.0.1:7001: OK</div><div class="line">Connecting to node 127.0.0.1:7004: OK</div><div class="line">Connecting to node 127.0.0.1:7000: OK</div><div class="line">Connecting to node 127.0.0.1:7002: OK</div><div class="line">Connecting to node 127.0.0.1:7005: OK</div><div class="line">Connecting to node 127.0.0.1:7003: OK</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7006)</div><div class="line">M: efc3131fbdc6cf929720e0e0f7136cae85657481 127.0.0.1:7006</div><div class="line">   slots: (0 slots) master</div><div class="line">   0 additional replica(s)</div><div class="line">M: cb5c04b6160c3b7e18cad5d49d8e2987b27e0d6c 127.0.0.1:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 4b4aef8b48c427a3c903518339d53b6447c58b93 127.0.0.1:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates cb5c04b6160c3b7e18cad5d49d8e2987b27e0d6c</div><div class="line">S: 3707debcbe7be66d4a1968eaf3a5ffaf4308efa4 127.0.0.1:7000</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates d2237fdcfbba672de766b913d1186cebcb6e1761</div><div class="line">M: dfa0754c7854a874a6ebd2613b86140ad97701fc 127.0.0.1:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 30858dbf483b61b9838d5c1f853a60beaa4e7afd 127.0.0.1:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates dfa0754c7854a874a6ebd2613b86140ad97701fc</div><div class="line">M: d2237fdcfbba672de766b913d1186cebcb6e1761 127.0.0.1:7003</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">How many slots do you want to move (from 1 to 16384)?</div></pre></td></tr></table></figure></p>
<p>它提示我们需要迁移多少slot到7006上，我们可以算一下：16384/4 = 4096，也就是说，为了平衡分配起见，我们需要移动4096个槽点到7006上。</p>
<p>好，那输入4096:<br>它又提示我们，接受的node ID是多少，7006的id 我们通过上面就可以看到是<code>efc3131fbdc6cf929720e0e0f7136cae85657481</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">What is the receiving node ID? efc3131fbdc6cf929720e0e0f7136cae85657481</div><div class="line">Please enter all the source node IDs.</div><div class="line">  Type &apos;all&apos; to use all the nodes as source nodes for the hash slots.</div><div class="line">  Type &apos;done&apos; once you entered all the source nodes IDs.</div><div class="line">Source node #1:</div></pre></td></tr></table></figure></p>
<p>接着， redis-trib 会向你询问重新分片的源节点（source node）， 也即是， 要从哪个节点中取出 4096 个哈希槽， 并将这些槽移动到7006节点上面。</p>
<p>如果我们不打算从特定的节点上取出指定数量的哈希槽， 那么可以向 redis-trib 输入 all ， 这样的话， 集群中的所有主节点都会成为源节点， redis-trib 将从各个源节点中各取出一部分哈希槽， 凑够 4096 个， 然后移动到7006节点上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Source node #1:all</div></pre></td></tr></table></figure></p>
<p>接下来就开始迁移了，并且会询问你是否确认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Moving slot 1359 from d2237fdcfbba672de766b913d1186cebcb6e1761</div><div class="line">    Moving slot 1360 from d2237fdcfbba672de766b913d1186cebcb6e1761</div><div class="line">    Moving slot 1361 from d2237fdcfbba672de766b913d1186cebcb6e1761</div><div class="line">    Moving slot 1362 from d2237fdcfbba672de766b913d1186cebcb6e1761</div><div class="line">    Moving slot 1363 from d2237fdcfbba672de766b913d1186cebcb6e1761</div><div class="line">    Moving slot 1364 from d2237fdcfbba672de766b913d1186cebcb6e1761</div><div class="line">Do you want to proceed with the proposed reshard plan (yes/no)?</div></pre></td></tr></table></figure></p>
<p>输入yes并回车后，redis-trib就会正式执行重新分片操作，将制定的哈希槽从源节点一个个移动到7006节点上<br>迁移结束之后，我们来检查一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">M: bdcddddd3d78a866b44b68c7ae0e5ccf875c446a 127.0.0.1:7000</div><div class="line">   slots:1365-5460 (4096 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: d403713ab9db48aeac5b5393b69e1201026ef479 127.0.0.1:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates bdcddddd3d78a866b44b68c7ae0e5ccf875c446a</div><div class="line">S: b7ec92919e5bcffa76c8eee338f8ca5155293c64 127.0.0.1:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b85519795fa42aa33d4e88d25104cbae895933a6</div><div class="line">M: e55599320dabfb31bd22a01407e66121f075e7d3 127.0.0.1:7006</div><div class="line">   slots:0-1364,5461-6826,10923-12287 (4096 slots) master</div><div class="line">   0 additional replica(s)</div><div class="line">M: b85519795fa42aa33d4e88d25104cbae895933a6 127.0.0.1:7001</div><div class="line">   slots:6827-10922 (4096 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 8a0d2a3f271b349744a971e1b0a545405de2742e 127.0.0.1:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates b681e1a151890cbf957d1ff08352ee48f6ae39e6</div><div class="line">M: b681e1a151890cbf957d1ff08352ee48f6ae39e6 127.0.0.1:7002</div><div class="line">   slots:12288-16383 (4096 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure></p>
<p>我们可以看到<br><code>slots:0-1364,5461-6826,10923-12287 (4096 slots)</code><br>这些原来在其他节点上的哈希槽都迁移到了7006上</p>
<h3 id="增加一个从节点"><a href="#增加一个从节点" class="headerlink" title="增加一个从节点"></a>增加一个从节点</h3><p>新建一个 7007从节点，作为7006的从节点</p>
<p>我们再新建一个节点7007，步骤类似，就先省略了。建好后，启动起来，我们看如何把它加入到集群中的从节点中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@centos1]# redis-trib.rb add-node --slave 127.0.0.1:7007 127.0.0.1:7000</div></pre></td></tr></table></figure></p>
<p>add-node的时候加上<code>--slave</code>表示是加入到从节点中，但是这样加，是随机的。这里的命令行完全像我们在添加一个新主服务器时使用的一样，所以我们没有指定要给哪个主服 务器添加副本。这种情况下，redis-trib会将7007作为一个具有较少副本的随机的主服务器的副本。</p>
<p>那么，你猜，它会作为谁的从节点，应该是7006，因为7006还没有从节点。我们运行下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@web3 7007]# redis-trib.rb add-node --slave 127.0.0.1:7007 127.0.0.1:7000</div><div class="line">...</div><div class="line">...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">Automatically selected master 127.0.0.1:7006</div><div class="line">Connecting to node 127.0.0.1:7007: OK</div><div class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 127.0.0.1:7007 to make it join the cluster.</div><div class="line">Waiting for the cluster to join.</div><div class="line">&gt;&gt;&gt; Configure node as replica of 127.0.0.1:7006.</div><div class="line">[OK] New node added correctly.</div></pre></td></tr></table></figure></p>
<p>上面提示说，自动选择了7006作为master节点。并且成功了。我们检查下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[root@centos1]# redis-trib.rb check 127.0.0.1:7000</div><div class="line">Connecting to node 127.0.0.1:7000: OK</div><div class="line">Connecting to node 127.0.0.1:7006: OK</div><div class="line">Connecting to node 127.0.0.1:7004: OK</div><div class="line">Connecting to node 127.0.0.1:7005: OK</div><div class="line">Connecting to node 127.0.0.1:7003: OK</div><div class="line">Connecting to node 127.0.0.1:7001: OK</div><div class="line">Connecting to node 127.0.0.1:7007: OK</div><div class="line">Connecting to node 127.0.0.1:7002: OK</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:7000)</div><div class="line">S: 3707debcbe7be66d4a1968eaf3a5ffaf4308efa4 127.0.0.1:7000</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates d2237fdcfbba672de766b913d1186cebcb6e1761</div><div class="line">M: efc3131fbdc6cf929720e0e0f7136cae85657481 127.0.0.1:7006</div><div class="line">   slots:0-1364,5461-6826,10923-12287 (4096 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 4b4aef8b48c427a3c903518339d53b6447c58b93 127.0.0.1:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates cb5c04b6160c3b7e18cad5d49d8e2987b27e0d6c</div><div class="line">S: 30858dbf483b61b9838d5c1f853a60beaa4e7afd 127.0.0.1:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates dfa0754c7854a874a6ebd2613b86140ad97701fc</div><div class="line">M: d2237fdcfbba672de766b913d1186cebcb6e1761 127.0.0.1:7003</div><div class="line">   slots:1365-5460 (4096 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: cb5c04b6160c3b7e18cad5d49d8e2987b27e0d6c 127.0.0.1:7001</div><div class="line">   slots:6827-10922 (4096 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 86d05e7c2b197dc182b5e71069e791d033cf899e 127.0.0.1:7007</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates efc3131fbdc6cf929720e0e0f7136cae85657481</div><div class="line">M: dfa0754c7854a874a6ebd2613b86140ad97701fc 127.0.0.1:7002</div><div class="line">   slots:12288-16383 (4096 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure></p>
<p>果然，7007加入到了7006的从节点当中。</p>
<p>你说，我如果想指定一个主节点行不行？当然可以。我们再建一个7008节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/redis-trib.rb add-node --slave --master-id efc3131fbdc6cf929720e0e0f7136cae85657481 127.0.0.1:7008 127.0.0.1:7000</div></pre></td></tr></table></figure></p>
<p><code>--master-id</code> 表示指定的主节点node id。这里指定的是 7006 这个主节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Waiting for the cluster to join.</div><div class="line">&gt;&gt;&gt; Configure node as replica of 127.0.0.1:7006.</div><div class="line">[OK] New node added correctly.</div></pre></td></tr></table></figure></p>
<p>提示我们已经作为7006的从节点了，也就是加入到7006的从节点来了，照这么说，7006就有2个从节点了，我们看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/redis-cli -c -p 7008 cluster nodes |grep efc3131fbdc6cf929720e0e0f7136cae85657481</div><div class="line">86d05e7c2b197dc182b5e71069e791d033cf899e 127.0.0.1:7007 slave efc3131fbdc6cf929720e0e0f7136cae85657481 0 1445089507786 8 connected</div><div class="line">efc3131fbdc6cf929720e0e0f7136cae85657481 127.0.0.1:7006 master - 0 1445089508289 8 connected 0-1364 5461-6826 10923-12287</div><div class="line">44321e7d619410dc4e0a8745366610a0d06d2395 127.0.0.1:7008 myself,slave efc3131fbdc6cf929720e0e0f7136cae85657481 0 0 0 connected</div></pre></td></tr></table></figure></p>
<p>我们过滤了下看结果，果真，7007和7008是7006的从节点了。</p>
<p>刚好，我们再做一个实验，我把7006的进程杀掉，看7007和7008谁会变成主节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@centos1]# ps -ef|grep redis</div><div class="line">root     11384     1  0 09:56 ?        00:00:16 redis-server *:7001 [cluster]</div><div class="line">root     11388     1  0 09:56 ?        00:00:16 redis-server *:7002 [cluster]</div><div class="line">root     11392     1  0 09:56 ?        00:00:16 redis-server *:7003 [cluster]</div><div class="line">root     11396     1  0 09:56 ?        00:00:15 redis-server *:7004 [cluster]</div><div class="line">root     11400     1  0 09:56 ?        00:00:15 redis-server *:7005 [cluster]</div><div class="line">root     12100     1  0 11:01 ?        00:00:11 redis-server *:7000 [cluster]</div><div class="line">root     12132     1  0 11:28 ?        00:00:11 redis-server *:7006 [cluster]</div><div class="line">root     12202     1  0 13:14 ?        00:00:02 redis-server *:7007 [cluster]</div><div class="line">root     12219     1  0 13:39 ?        00:00:00 redis-server *:7008 [cluster]</div><div class="line">root     12239  8259  0 13:49 pts/0    00:00:00 grep redis</div><div class="line">[root@centos1]# kill 12132</div><div class="line">[root@centos1]# redis-cli -c -p 7008</div><div class="line">127.0.0.1:7008&gt; get ss5rtr</div><div class="line">-&gt; Redirected to slot [1188] located at 127.0.0.1:7007</div><div class="line">&quot;66&quot;</div><div class="line">127.0.0.1:7007&gt; cluster nodes</div><div class="line">efc3131fbdc6cf929720e0e0f7136cae85657481 127.0.0.1:7006 master,fail - 1445089780668 1445089779963 8 disconnected</div><div class="line">d2237fdcfbba672de766b913d1186cebcb6e1761 127.0.0.1:7003 master - 0 1445089812195 7 connected 1365-5460</div><div class="line">30858dbf483b61b9838d5c1f853a60beaa4e7afd 127.0.0.1:7005 slave dfa0754c7854a874a6ebd2613b86140ad97701fc 0 1445089813710 3 connected</div><div class="line">86d05e7c2b197dc182b5e71069e791d033cf899e 127.0.0.1:7007 myself,master - 0 0 10 connected 0-1364 5461-6826 10923-12287</div><div class="line">cb5c04b6160c3b7e18cad5d49d8e2987b27e0d6c 127.0.0.1:7001 master - 0 1445089814214 2 connected 6827-10922</div><div class="line">4b4aef8b48c427a3c903518339d53b6447c58b93 127.0.0.1:7004 slave cb5c04b6160c3b7e18cad5d49d8e2987b27e0d6c 0 1445089812701 2 connected</div><div class="line">44321e7d619410dc4e0a8745366610a0d06d2395 127.0.0.1:7008 slave 86d05e7c2b197dc182b5e71069e791d033cf899e 0 1445089814214 10 connected</div><div class="line">3707debcbe7be66d4a1968eaf3a5ffaf4308efa4 127.0.0.1:7000 slave d2237fdcfbba672de766b913d1186cebcb6e1761 0 1445089813204 7 connected</div><div class="line">dfa0754c7854a874a6ebd2613b86140ad97701fc 127.0.0.1:7002 master - 0 1445089813204 3 connected 12288-16383</div><div class="line">127.0.0.1:7007&gt;</div></pre></td></tr></table></figure></p>
<p>这里7007获得了成为主节点的机会，7008就变成了7007的从节点。</p>
<p>那么这个时候，重启7006节点，那么他就会变成了一个7007的从节点了。</p>
<h3 id="移除一个节点"><a href="#移除一个节点" class="headerlink" title="移除一个节点"></a>移除一个节点</h3><p>上面是增加一个节点，接下来就是移除一个节点了，移除节点的命令是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/redis-trib del-node 127.0.0.1:7000 `&lt;node-id&gt;`</div></pre></td></tr></table></figure></p>
<p>没我们尝试下输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@centos]# bin/redis-trib.rb del-node 127.0.0.1:7000 86d05e7c2b197dc182b5e71069e791d033cf899e</div><div class="line">&gt;&gt;&gt; Removing node 86d05e7c2b197dc182b5e71069e791d033cf899e from cluster 127.0.0.1:7000</div><div class="line">Connecting to node 127.0.0.1:7000: OK</div><div class="line">Connecting to node 127.0.0.1:7006: OK</div><div class="line">Connecting to node 127.0.0.1:7004: OK</div><div class="line">Connecting to node 127.0.0.1:7001: OK</div><div class="line">Connecting to node 127.0.0.1:7003: OK</div><div class="line">Connecting to node 127.0.0.1:7007: OK</div><div class="line">Connecting to node 127.0.0.1:7008: OK</div><div class="line">Connecting to node 127.0.0.1:7005: OK</div><div class="line">Connecting to node 127.0.0.1:7002: OK</div><div class="line">[ERR] Node 127.0.0.1:7007 is not empty! Reshard data away and try again.</div></pre></td></tr></table></figure></p>
<p>这里报错了，提示我们7007节点里面有数据，让我们把7007节点里的数据移除出去，也就是说需要重新分片，这个和上面增加节点的方式一样，我们再来一遍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/redis-trib.rb reshard 127.0.0.1:7000</div></pre></td></tr></table></figure></p>
<p>省去中间内容，原来7007节点上已经有了4096个哈希槽，这里我们也移动4096个哈希槽<br>然后将这些哈希槽移动到7001节点上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Source node #1:86d05e7c2b197dc182b5e71069e791d033cf899e</div><div class="line">Source node #2:done</div><div class="line">Do you want to proceed with the proposed reshard plan (yes/no)? yes</div></pre></td></tr></table></figure></p>
<p>然后我们再继续执行移除命令，结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@centos1]# redis-trib.rb del-node 127.0.0.1:7000 86d05e7c2b197dc182b5e71069e791d033cf899e</div><div class="line">&gt;&gt;&gt; Removing node 86d05e7c2b197dc182b5e71069e791d033cf899e from cluster 127.0.0.1:7000</div><div class="line">Connecting to node 127.0.0.1:7000: OK</div><div class="line">Connecting to node 127.0.0.1:7006: OK</div><div class="line">Connecting to node 127.0.0.1:7004: OK</div><div class="line">Connecting to node 127.0.0.1:7001: OK</div><div class="line">Connecting to node 127.0.0.1:7003: OK</div><div class="line">Connecting to node 127.0.0.1:7007: OK</div><div class="line">Connecting to node 127.0.0.1:7008: OK</div><div class="line">Connecting to node 127.0.0.1:7005: OK</div><div class="line">Connecting to node 127.0.0.1:7002: OK</div><div class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</div><div class="line">&gt;&gt;&gt; 127.0.0.1:7006 as replica of 127.0.0.1:7001</div><div class="line">&gt;&gt;&gt; 127.0.0.1:7008 as replica of 127.0.0.1:7001</div><div class="line">&gt;&gt;&gt; SHUTDOWN the node.</div></pre></td></tr></table></figure></p>
<p>删除成功，而且还很人性化的将7006和7008这2个原来7007的附属节点送给了7001。考虑的真周到~</p>
<h3 id="移除一个从节点"><a href="#移除一个从节点" class="headerlink" title="移除一个从节点"></a>移除一个从节点</h3><p>移除一个从节点就比较简单了，因为从节点没有哈希槽，也不需要考虑数据迁移，直接移除就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@centos1]# redis-trib.rb del-node 127.0.0.1:7005 44321e7d619410dc4e0a8745366610a0d06d2395</div><div class="line">&gt;&gt;&gt; Removing node 44321e7d619410dc4e0a8745366610a0d06d2395 from cluster 127.0.0.1:7005</div><div class="line">Connecting to node 127.0.0.1:7005: OK</div><div class="line">Connecting to node 127.0.0.1:7001: OK</div><div class="line">Connecting to node 127.0.0.1:7002: OK</div><div class="line">Connecting to node 127.0.0.1:7004: OK</div><div class="line">Connecting to node 127.0.0.1:7000: OK</div><div class="line">Connecting to node 127.0.0.1:7006: OK</div><div class="line">Connecting to node 127.0.0.1:7008: OK</div><div class="line">Connecting to node 127.0.0.1:7003: OK</div><div class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</div><div class="line">&gt;&gt;&gt; SHUTDOWN the node.</div><div class="line">[root@centos1]# redis-trib.rb check 127.0.0.1:7008</div><div class="line">Connecting to node 127.0.0.1:7008: [ERR] Sorry, can&apos;t connect to node 127.0.0.1:7008</div></pre></td></tr></table></figure></p>
<p>表示移除成功</p>
<h2 id="Redis性能测试"><a href="#Redis性能测试" class="headerlink" title="Redis性能测试"></a>Redis性能测试</h2><p>Redis自带了性能测试工具<code>redis-benchmark</code><br>使用说明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Usage: redis-benchmark [-h &lt;host&gt;] [-p &lt;port&gt;] [-c &lt;clients&gt;] [-n &lt;requests]&gt; [-k &lt;boolean&gt;]</div><div class="line"></div><div class="line"> -h &lt;hostname&gt;      Server hostname (default 127.0.0.1)</div><div class="line"> -p &lt;port&gt;          Server port (default 6379)</div><div class="line"> -s &lt;socket&gt;        Server socket (overrides host and port)</div><div class="line"> -c &lt;clients&gt;       Number of parallel connections (default 50)</div><div class="line"> -n &lt;requests&gt;      Total number of requests (default 10000)</div><div class="line"> -d &lt;size&gt;          Data size of SET/GET value in bytes (default 2)</div><div class="line"> -k &lt;boolean&gt;       1=keep alive 0=reconnect (default 1)</div><div class="line"> -r &lt;keyspacelen&gt;   Use random keys for SET/GET/INCR, random values for SADD</div><div class="line">  Using this option the benchmark will get/set keys</div><div class="line">  in the form mykey_rand:000000012456 instead of constant</div><div class="line">  keys, the &lt;keyspacelen&gt; argument determines the max</div><div class="line">  number of values for the random number. For instance</div><div class="line">  if set to 10 only rand:000000000000 - rand:000000000009</div><div class="line">  range will be allowed.</div><div class="line"> -P &lt;numreq&gt;        Pipeline &lt;numreq&gt; requests. Default 1 (no pipeline).</div><div class="line"> -q                 Quiet. Just show query/sec values</div><div class="line"> --csv              Output in CSV format</div><div class="line"> -l                 Loop. Run the tests forever</div><div class="line"> -t &lt;tests&gt;         Only run the comma-separated list of tests. The test</div><div class="line">                    names are the same as the ones produced as output.</div><div class="line"> -I                 Idle mode. Just open N idle connections and wait.</div></pre></td></tr></table></figure></p>
<h3 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h3><p>基准的测试命令：<br><code>redis-benchmark -q -n 100000</code><br>结果入下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">root@centos1 bin]# redis-benchmark -q -n 100000</div><div class="line">-bash: redis-benchmark: command not found</div><div class="line">[root@centos1 bin]# ./redis-benchmark -q -n 100000</div><div class="line">PING_INLINE: 61576.36 requests per second</div><div class="line">PING_BULK: 60277.28 requests per second</div><div class="line">SET: 61349.69 requests per second</div><div class="line">GET: 60459.49 requests per second</div><div class="line">INCR: 58858.15 requests per second</div><div class="line">LPUSH: 59066.75 requests per second</div><div class="line">RPUSH: 57339.45 requests per second</div><div class="line">LPOP: 55586.44 requests per second</div><div class="line">RPOP: 56465.27 requests per second</div><div class="line">SADD: 57045.07 requests per second</div><div class="line">SPOP: 53734.55 requests per second</div><div class="line">LPUSH (needed to benchmark LRANGE): 57012.54 requests per second</div><div class="line">LRANGE_100 (first 100 elements): 55803.57 requests per second</div><div class="line">LRANGE_300 (first 300 elements): 54914.88 requests per second</div><div class="line">LRANGE_500 (first 450 elements): 53333.33 requests per second</div><div class="line">LRANGE_600 (first 600 elements): 56529.11 requests per second</div><div class="line">MSET (10 keys): 59276.82 requests per second</div></pre></td></tr></table></figure></p>
<p>这里可以看出，单机版的redis每秒可以处理6万个请求，这已经是一个非常厉害的数据了，不得不佩服<br>我们再来看下集群情况下是是什么情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@centos1 bin]# ./redis-benchmark -q -n 100000 -p 7000</div><div class="line">PING_INLINE: 64599.48 requests per second</div><div class="line">PING_BULK: 64184.85 requests per second</div><div class="line">SET: 66800.27 requests per second</div><div class="line">GET: 65616.80 requests per second</div><div class="line">INCR: 66269.05 requests per second</div><div class="line">LPUSH: 40273.86 requests per second</div><div class="line">RPUSH: 40355.12 requests per second</div><div class="line">LPOP: 43421.62 requests per second</div><div class="line">RPOP: 45187.53 requests per second</div><div class="line">SADD: 62539.09 requests per second</div><div class="line">SPOP: 61538.46 requests per second</div><div class="line">LPUSH (needed to benchmark LRANGE): 38182.51 requests per second</div><div class="line">LRANGE_100 (first 100 elements): 25555.84 requests per second</div><div class="line">LRANGE_300 (first 300 elements): 9571.21 requests per second</div><div class="line">LRANGE_500 (first 450 elements): 7214.49 requests per second</div><div class="line">LRANGE_600 (first 600 elements): 5478.85 requests per second</div><div class="line">MSET (10 keys): 41893.59 requests per second</div></pre></td></tr></table></figure></p>
<p>这里看出大部分和单机版的性能查不多，主要是<code>lrange</code>命令的差别是很大的</p>
<h3 id="流水线测试"><a href="#流水线测试" class="headerlink" title="流水线测试"></a>流水线测试</h3><p>使用流水线<br>默认情况下，每个客户端都是在一个请求完成之后才发送下一个请求（基准会模拟50个客户端除非使用-c指定特别的数量），这意味着服务器几乎是按顺序读取每个客户端的命令。RTT也加入了其中。<br>真实世界会更复杂，Redis支持/topics/pipelining，使得可以一次性执行多条命令成为可能。Redis流水线可以提高服务器的TPS<br><code>redis-benchmark -n 1000000 -t set,get -P 16 -q</code> 加入-P选项使用管道技术，一次执行多条命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./redis-benchmark -n 1000000 -t set,get -P 16 -q</div><div class="line">SET: 515198.34 requests per second</div><div class="line">GET: 613873.56 requests per second</div></pre></td></tr></table></figure></p>
<p>每秒处理get/sret请求达到了60/50W,真的厉害！</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol>
<li>安装redis集群的时候遇到了挺多问题，踩了很多坑，单单是修改配置文件就出了不少问题，那些配置文件的内容都要一一修改，有些配置不修改就会出现无法创建进程的错误</li>
<li>注意配置集群的时候不要加密码，否则会出现无法连接的情况</li>
<li><code>gem install</code>的时候需要修改镜像或者翻墙</li>
<li>昨天启动成功，今天启动的时候报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ERR] Node 172.168.63.202:7001 is not empty. Either the nodealready knows other nodes (check with CLUSTER NODES) or contains some key in database 0</div></pre></td></tr></table></figure>
</li>
</ol>
<p>解决方法：<br>1). 将需要新增的节点下aof、rdb等本地备份文件删除；<br>2). 同时将新Node的集群配置文件删除,即：删除你<code>redis.conf</code>里面<code>cluster-config-file</code>所在的文件；<br>3). 再次添加新节点如果还是报错，则登录新Node,执行<code>bin/redis-cli–h x –p</code>对数据库进行清除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">173.172.168.63.201:7001&gt;  flushdb      #清空当前数据库</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>之间对了Redis的了解并不是说非常多，只是简单的会用，因为现在企业里也很多都在用，刚好老大说接下来的项目可能会用到Redis集群，让我先去了解下，所以最近就在回头看，一边看文档，博客，一边实践，踩了很多的坑，出问题的时候的确是让人感到很痛苦很郁闷的，可是当运行成功的那一刻心情却是无比激动和开心的，可能这就是编程的魅力吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Redis 是我们目前大规模使用的缓存中间件，由于它强大高效而又便捷的功能，得到了广泛的使用。单节点的Redis已经就达到了很高的性能，为了提高可用性我们可以使用Redis集群。本文参考了Rdis的官方文档和使用Redis官方提供的Redis Cluster工具搭建Rdis集群。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; ：Redis的版本要在3.0以上,截止今天，Redis的版本是3.2.9，本教程也使用3.2.9作为教程&lt;br&gt;
    
    </summary>
    
      <category term="NoSQL" scheme="https://zgj12138.github.io/blog/categories/NoSQL/"/>
    
    
      <category term="redis" scheme="https://zgj12138.github.io/blog/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>生产者消费者的五种实现方式</title>
    <link href="https://zgj12138.github.io/blog/2017/06/30/Java%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BA%94%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>https://zgj12138.github.io/blog/2017/06/30/Java生产者消费者模型的五种实现方式/</id>
    <published>2017-06-30T13:47:18.000Z</published>
    <updated>2017-07-14T13:06:14.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>生产者和消费者问题是线程模型中的经典问题：生产者和消费者在同一时间段内共用同一个存储空间，生产者往存储空间中添加产品，消费者从存储空间中取走产品，当存储空间为空时，消费者阻塞，当存储空间满时，生产者阻塞。<br><img src="https://ooo.0o0.ooo/2017/06/29/595523d4de338.png" alt="生产者消费者.png"><br><strong>现在用五种方式来实现生产者消费者模型</strong><br><a id="more"></a></p>
<h2 id="wait-和notify-方法的实现"><a href="#wait-和notify-方法的实现" class="headerlink" title="wait()和notify()方法的实现"></a>wait()和notify()方法的实现</h2><p>这也是最简单最基础的实现，缓冲区满和为空时都调用wait()方法等待，当生产者生产了一个产品或者消费者消费了一个产品之后会唤醒所有线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 生产者和消费者，wait()和notify()的实现</div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年6月22日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Integer count = <span class="number">0</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer FULL = <span class="number">10</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String LOCK = <span class="string">"lock"</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Test1 test1 = <span class="keyword">new</span> Test1();</div><div class="line">		<span class="keyword">new</span> Thread(test1.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test1.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test1.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test1.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test1.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test1.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test1.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test1.new Consumer()).start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">3000</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">synchronized</span> (LOCK) &#123;</div><div class="line">					<span class="keyword">while</span> (count == FULL) &#123;</div><div class="line">						<span class="keyword">try</span> &#123;</div><div class="line">							LOCK.wait();</div><div class="line">						&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">							e.printStackTrace();</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					count++;</div><div class="line">					System.out.println(Thread.currentThread().getName() + <span class="string">"生产者生产，目前总共有"</span> + count);</div><div class="line">					LOCK.notifyAll();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">3000</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">synchronized</span> (LOCK) &#123;</div><div class="line">					<span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</div><div class="line">						<span class="keyword">try</span> &#123;</div><div class="line">							LOCK.wait();</div><div class="line">						&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					count--;</div><div class="line">					System.out.println(Thread.currentThread().getName() + <span class="string">"消费者消费，目前总共有"</span> + count);</div><div class="line">					LOCK.notifyAll();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>结果:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Thread-0生产者生产，目前总共有1</div><div class="line">Thread-4生产者生产，目前总共有2</div><div class="line">Thread-3消费者消费，目前总共有1</div><div class="line">Thread-1消费者消费，目前总共有0</div><div class="line">Thread-2生产者生产，目前总共有1</div><div class="line">Thread-6生产者生产，目前总共有2</div><div class="line">Thread-7消费者消费，目前总共有1</div><div class="line">Thread-5消费者消费，目前总共有0</div><div class="line">Thread-0生产者生产，目前总共有1</div><div class="line">Thread-4生产者生产，目前总共有2</div><div class="line">Thread-3消费者消费，目前总共有1</div><div class="line">Thread-6生产者生产，目前总共有2</div><div class="line">Thread-1消费者消费，目前总共有1</div><div class="line">Thread-7消费者消费，目前总共有0</div><div class="line">Thread-2生产者生产，目前总共有1</div><div class="line">Thread-5消费者消费，目前总共有0</div><div class="line">Thread-0生产者生产，目前总共有1</div><div class="line">Thread-4生产者生产，目前总共有2</div><div class="line">Thread-3消费者消费，目前总共有1</div><div class="line">Thread-7消费者消费，目前总共有0</div><div class="line">Thread-6生产者生产，目前总共有1</div><div class="line">Thread-2生产者生产，目前总共有2</div><div class="line">Thread-1消费者消费，目前总共有1</div><div class="line">Thread-5消费者消费，目前总共有0</div><div class="line">Thread-0生产者生产，目前总共有1</div><div class="line">Thread-4生产者生产，目前总共有2</div><div class="line">Thread-3消费者消费，目前总共有1</div><div class="line">Thread-1消费者消费，目前总共有0</div><div class="line">Thread-6生产者生产，目前总共有1</div><div class="line">Thread-7消费者消费，目前总共有0</div><div class="line">Thread-2生产者生产，目前总共有1</div></pre></td></tr></table></figure></p>
<h2 id="可重入锁ReentrantLock的实现"><a href="#可重入锁ReentrantLock的实现" class="headerlink" title="可重入锁ReentrantLock的实现"></a>可重入锁ReentrantLock的实现</h2><p>java.util.concurrent.lock 中的 Lock 框架是锁定的一个抽象，通过对lock的lock()方法和unlock()方法实现了对锁的显示控制，而synchronize()则是对锁的隐性控制。<br>可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响，简单来说，该锁维护这一个与获取锁相关的计数器，如果拥有锁的某个线程再次得到锁，那么获取计数器就加1，函数调用结束计数器就减1，然后锁需要被释放两次才能获得真正释放。已经获取锁的线程进入其他需要相同锁的同步代码块不会被阻塞。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 生产者和消费者，ReentrantLock的实现</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年6月22日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Integer count = <span class="number">0</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer FULL = <span class="number">10</span>;</div><div class="line">	<span class="comment">//创建一个锁对象</span></div><div class="line">	<span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">	<span class="comment">//创建两个条件变量，一个为缓冲区非满，一个为缓冲区非空</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = lock.newCondition();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = lock.newCondition();</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Test2 test2 = <span class="keyword">new</span> Test2();</div><div class="line">		<span class="keyword">new</span> Thread(test2.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test2.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test2.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test2.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test2.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test2.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test2.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test2.new Consumer()).start();</div><div class="line">	&#125;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">3000</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">                <span class="comment">//获取锁</span></div><div class="line">				lock.lock();</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="keyword">while</span> (count == FULL) &#123;</div><div class="line">						<span class="keyword">try</span> &#123;</div><div class="line">							notFull.await();</div><div class="line">						&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">							e.printStackTrace();</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					count++;</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"生产者生产，目前总共有"</span> + count);</div><div class="line">					<span class="comment">//唤醒消费者</span></div><div class="line">					notEmpty.signal();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">                	<span class="comment">//释放锁</span></div><div class="line">					lock.unlock();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">3000</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</div><div class="line">					e1.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				lock.lock();</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</div><div class="line">						<span class="keyword">try</span> &#123;</div><div class="line">							notEmpty.await();</div><div class="line">						&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">							e.printStackTrace();</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					count--;</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"消费者消费，目前总共有"</span> + count);</div><div class="line">					notFull.signal();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					lock.unlock();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="阻塞队列BlockingQueue的实现"><a href="#阻塞队列BlockingQueue的实现" class="headerlink" title="阻塞队列BlockingQueue的实现"></a>阻塞队列BlockingQueue的实现</h2><p>BlockingQueue即阻塞队列，从阻塞这个词可以看出，在某些情况下对阻塞队列的访问可能会造成阻塞。<br>被阻塞的情况主要有如下两种:</p>
<ol>
<li>当队列满了的时候进行入队列操作</li>
<li>当队列空了的时候进行出队列操作</li>
</ol>
<p>因此，当一个线程对已经满了的阻塞队列进行入队操作时会阻塞，除非有另外一个线程进行了出队操作，当一个线程对一个空的阻塞队列进行出队操作时也会阻塞，除非有另外一个线程进行了入队操作。<br>从上可知，阻塞队列是线程安全的。<br>下面是BlockingQueue接口的一些方法:</p>
<table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th style="text-align:center">抛异常</th>
<th style="text-align:center">特定值</th>
<th style="text-align:center">阻塞</th>
<th style="text-align:center">超时</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">插入</td>
<td style="text-align:center">add(o)</td>
<td style="text-align:center">offer(o)</td>
<td style="text-align:center">put(o)</td>
<td style="text-align:center">offer(o, timeout, timeunit)</td>
</tr>
<tr>
<td style="text-align:center">移除</td>
<td style="text-align:center">remove(o)</td>
<td style="text-align:center">poll(o)</td>
<td style="text-align:center">take(o)</td>
<td style="text-align:center">poll(timeout, timeunit)</td>
</tr>
<tr>
<td style="text-align:center">检查</td>
<td style="text-align:center">element(o)</td>
<td style="text-align:center">peek(o)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>这四类方法分别对应的是：<br>1 . ThrowsException：如果操作不能马上进行，则抛出异常<br>2 . SpecialValue：如果操作不能马上进行，将会返回一个特殊的值，一般是true或者false<br>3 . Blocks:如果操作不能马上进行，操作会被阻塞<br>4 . TimesOut:如果操作不能马上进行，操作会被阻塞指定的时间，如果指定时间没执行，则返回一个特殊值，一般是true或者false<br>下面来看由阻塞队列实现的生产者消费者模型,这里我们使用take()和put()方法，这里生产者和生产者，消费者和消费者之间不存在同步，所以会出现连续生成和连续消费的现象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用BlockingQueue实现生产者消费者模型</div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年6月29日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Integer count = <span class="number">0</span>;</div><div class="line">	<span class="comment">//创建一个阻塞队列</span></div><div class="line">	<span class="keyword">final</span> BlockingQueue&lt;Integer&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Test3 test3 = <span class="keyword">new</span> Test3();</div><div class="line">		<span class="keyword">new</span> Thread(test3.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test3.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test3.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test3.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test3.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test3.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test3.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test3.new Consumer()).start();</div><div class="line">	&#125;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">3000</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					blockingQueue.put(<span class="number">1</span>);</div><div class="line">					count++;</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"生产者生产，目前总共有"</span> + count);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">3000</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</div><div class="line">					e1.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					blockingQueue.take();</div><div class="line">					count--;</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"消费者消费，目前总共有"</span> + count);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="信号量Semaphore的实现"><a href="#信号量Semaphore的实现" class="headerlink" title="信号量Semaphore的实现"></a>信号量Semaphore的实现</h2><p>Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源，在操作系统中是一个非常重要的问题，可以用来解决哲学家就餐问题。Java中的Semaphore维护了一个许可集，一开始先设定这个许可集的数量，可以使用acquire()方法获得一个许可，当许可不足时会被阻塞，release()添加一个许可。<br>在下列代码中，还加入了另外一个mutex信号量，维护生产者消费者之间的同步关系，保证生产者和消费者之间的交替进行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用semaphore信号量实现</div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年6月29日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Integer count = <span class="number">0</span>;</div><div class="line">	<span class="comment">//创建三个信号量</span></div><div class="line">	<span class="keyword">final</span> Semaphore notFull = <span class="keyword">new</span> Semaphore(<span class="number">10</span>);</div><div class="line">	<span class="keyword">final</span> Semaphore notEmpty = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</div><div class="line">	<span class="keyword">final</span> Semaphore mutex = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Test4 test4 = <span class="keyword">new</span> Test4();</div><div class="line">		<span class="keyword">new</span> Thread(test4.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test4.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test4.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test4.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test4.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test4.new Consumer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test4.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test4.new Consumer()).start();</div><div class="line">	&#125;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">3000</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					notFull.acquire();</div><div class="line">					mutex.acquire();</div><div class="line">					count++;</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"生产者生产，目前总共有"</span> + count);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					mutex.release();</div><div class="line">					notEmpty.release();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">3000</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</div><div class="line">					e1.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					notEmpty.acquire();</div><div class="line">					mutex.acquire();</div><div class="line">					count--;</div><div class="line">					System.out.println(Thread.currentThread().getName()</div><div class="line">							+ <span class="string">"消费者消费，目前总共有"</span> + count);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					mutex.release();</div><div class="line">					notFull.release();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="管道输入输出流PipedInputStream和PipedOutputStream实现"><a href="#管道输入输出流PipedInputStream和PipedOutputStream实现" class="headerlink" title="管道输入输出流PipedInputStream和PipedOutputStream实现"></a>管道输入输出流PipedInputStream和PipedOutputStream实现</h2><p>在java的io包下，PipedOutputStream和PipedInputStream分别是管道输出流和管道输入流。<br>它们的作用是让多线程可以通过管道进行线程间的通讯。在使用管道通信时，必须将PipedOutputStream和PipedInputStream配套使用。<br>使用方法：先创建一个管道输入流和管道输出流，然后将输入流和输出流进行连接，用生产者线程往管道输出流中写入数据，消费者在管道输入流中读取数据，这样就可以实现了不同线程间的相互通讯，但是这种方式在生产者和生产者、消费者和消费者之间不能保证同步，也就是说在一个生产者和一个消费者的情况下是可以生产者和消费者之间交替运行的，多个生成者和多个消费者者之间则不行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用管道实现生产者消费者模型</div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年6月30日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> PipedInputStream pis = <span class="keyword">new</span> PipedInputStream();</div><div class="line">	<span class="keyword">final</span> PipedOutputStream pos = <span class="keyword">new</span> PipedOutputStream();</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			pis.connect(pos);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">					Thread.sleep(<span class="number">1000</span>);</div><div class="line">					<span class="keyword">int</span> num = (<span class="keyword">int</span>) (Math.random() * <span class="number">255</span>);</div><div class="line">					System.out.println(Thread.currentThread().getName() + <span class="string">"生产者生产了一个数字，该数字为： "</span> + num);</div><div class="line">					pos.write(num);</div><div class="line">					pos.flush();</div><div class="line">				&#125; </div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					pos.close();</div><div class="line">					pis.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">					Thread.sleep(<span class="number">1000</span>);</div><div class="line">					<span class="keyword">int</span> num = pis.read();</div><div class="line">					System.out.println(<span class="string">"消费者消费了一个数字，该数字为："</span> + num);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					pos.close();</div><div class="line">					pis.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Test5 test5 = <span class="keyword">new</span> Test5();</div><div class="line">		<span class="keyword">new</span> Thread(test5.new Producer()).start();</div><div class="line">		<span class="keyword">new</span> Thread(test5.new Consumer()).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;生产者和消费者问题是线程模型中的经典问题：生产者和消费者在同一时间段内共用同一个存储空间，生产者往存储空间中添加产品，消费者从存储空间中取走产品，当存储空间为空时，消费者阻塞，当存储空间满时，生产者阻塞。&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/29/595523d4de338.png&quot; alt=&quot;生产者消费者.png&quot;&gt;&lt;br&gt;&lt;strong&gt;现在用五种方式来实现生产者消费者模型&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zgj12138.github.io/blog/categories/Java/"/>
    
    
      <category term="并发" scheme="https://zgj12138.github.io/blog/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="多线程" scheme="https://zgj12138.github.io/blog/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之——单例模式</title>
    <link href="https://zgj12138.github.io/blog/2017/05/19/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zgj12138.github.io/blog/2017/05/19/单例模式/</id>
    <published>2017-05-19T13:47:18.000Z</published>
    <updated>2017-06-14T05:30:22.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例。即一个类只有一个对象实例。我们会理所当然的认为单例模式很简单，其实单例模式是事先方式有很多种，现在就来一一介绍一下。</p>
</blockquote>
<a id="more"></a>
<h2 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 构造函数私有化</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">			instance = <span class="keyword">new</span> Singleton();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种写法呢，有懒加载的作用，但是在多线程环境下会线程不安全<br>为什么会线程不安全呢？<br>我们假设一下，假如线程A和线程B同时调用<code>getInstance()</code>方法，线程A先执行判断<code>if(instance == null)</code>，判断instance对象是空的，这时候线程B获得了CPU执行权，它也判断instance对象是控制，这个时候执行了<code>instance = new Singleton();</code>这段代码，创建了一个对象并把这个对象的引用赋值给了instance，这个时候线程A又获得了执行权，之前已经判断过对象为空了，所以线程A又new了一个新的对象，这个时候就不符合单例模式的要求了，所以这种懒汉式是线程不安全的</p>
<h2 id="懒汉式（线程安全）"><a href="#懒汉式（线程安全）" class="headerlink" title="懒汉式（线程安全）"></a>懒汉式（线程安全）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">        instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候，我们加上了synchronized关键字之后，相当于给这个对象加上了锁，就起到了同步的作用，同时只能有一个线程访问这个方法，不过这样的话也降低了效率</p>
<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> instance;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式基于classloder机制避免了多线程的同步问题，在类初始化的时候就实例化这个对象</p>
<h2 id="静态方法块"><a href="#静态方法块" class="headerlink" title="静态方法块"></a>静态方法块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">	instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式和上一种区别不大，都是在类初始化即实例化instance对象</p>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> SingletonHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式同样利用了classloder的类加载机制来保证初始化instance时只有一个线程，它和第三种饿汉式，第四种静态方法块不同的是：第三种和第四种方式是只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance</p>
<h2 id="双重检查锁定"><a href="#双重检查锁定" class="headerlink" title="双重检查锁定"></a>双重检查锁定</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">	    <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">		<span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">		    singleton = <span class="keyword">new</span> Singleton();</div><div class="line">		&#125;</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>双重检查锁定在C语言或者其他语言中已被广泛当做多线程环境下延迟初始化的一种高效手段，但是在Java中并不能很好的实现，这个涉及到Java的内存模型，所以需要加上<code>volatile</code>关键字，这个关键字的作用是保证内存可见性和禁止指令重排序</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</div><div class="line">    INSTANCE;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>枚举是JDK1.5之后才有的语法糖，实际上我们创建enum时，编译器会自动为我们生成一个继承自Java.lang.Enum的类<br>首先，在枚举中明确了构造方法限制为私有，在我们访问枚举实例时会执行构造方法，同时每个枚举实例都是static final类型的，也就表明只能被实例化一次。在调用构造方法时，我们的单例被实例化。<br>也就是说，因为enum中的实例被保证只会被实例化一次，所以我们的INSTANCE也被保证实例化一次。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例。即一个类只有一个对象实例。我们会理所当然的认为单例模式很简单，其实单例模式是事先方式有很多种，现在就来一一介绍一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://zgj12138.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat配置</title>
    <link href="https://zgj12138.github.io/blog/2017/05/15/Tomcat%E9%85%8D%E7%BD%AE/"/>
    <id>https://zgj12138.github.io/blog/2017/05/15/Tomcat配置/</id>
    <published>2017-05-15T04:43:25.000Z</published>
    <updated>2017-07-14T14:19:01.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道Tomcat服务器是我们在学习JavaWeb中最常使用的服务器，所以了解Tomcat的配置文件显得很重要，昨天去面试的时候，被面试官问了几个关于Tomcat配置文件的几个问题， 以前配过，但是后来都忘记了，现在来回顾一下Tomcat中比较常用得到的配置文件吧</p>
<h2 id="配置文件的位置"><a href="#配置文件的位置" class="headerlink" title="配置文件的位置"></a>配置文件的位置</h2><p>Tomcat的配置文件在<code>conf</code>目录下，有<code>context.xml</code>、<code>server.xml</code>、<code>tomcat-users.xml</code>、<code>web.xml</code>这些配置文件</p>
<a id="more"></a>
<h2 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h2><h3 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h3><p>如果要修改连接的端口，在<code>server.xml</code>文件的<code>Server</code>标签和<code>Connectot</code>标签下修改<br>如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></div><div class="line">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>将<code>port=xxxx</code>改成其他端口即可</p>
<h3 id="修改虚拟目录"><a href="#修改虚拟目录" class="headerlink" title="修改虚拟目录"></a>修改虚拟目录</h3><p>在<code>server.xml</code>中找到<code>Host</code>结点<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></div><div class="line">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications</span></div><div class="line">       Documentation at: /docs/config/valve.html --&gt;</div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">  &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;</div><div class="line">  --&gt;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Access log processes all example.</span></div><div class="line">       Documentation at: /docs/config/valve.html</div><div class="line">       <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line">         <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></div><div class="line">         <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>Host</code>结点代表一个主机，name对应的是其域名，我们可以通过修改name的属性来改变Tomcat资源的访问路径，方便我们管理</p>
<h2 id="tomcat-users"><a href="#tomcat-users" class="headerlink" title="tomcat-users"></a>tomcat-users</h2><p><code>toncat-users.xml</code>是配置用户登录Tomcat对app进行管理的配置文件，如果我们需要登录Tomcat，这需要在改配置文件的<code>tomcat-users</code>结点下加上如下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"123456"</span>  <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中，我这里配置的登录名是utomcat,密码是123456<br>我们打开Tomcat主页，点击Manager App<br><img src="https://ooo.0o0.ooo/2017/05/15/59193c2fdc604.png" alt="tomcat.png"></p>
<p>输入用户名和密码，进入到管理界面</p>
<p><img src="https://ooo.0o0.ooo/2017/05/15/59193c2fd0af1.png" alt="tomcat-manager.png"><br>这个时候我们就可以对我们的app进行管理了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们都知道Tomcat服务器是我们在学习JavaWeb中最常使用的服务器，所以了解Tomcat的配置文件显得很重要，昨天去面试的时候，被面试官问了几个关于Tomcat配置文件的几个问题， 以前配过，但是后来都忘记了，现在来回顾一下Tomcat中比较常用得到的配置文件吧&lt;/p&gt;
&lt;h2 id=&quot;配置文件的位置&quot;&gt;&lt;a href=&quot;#配置文件的位置&quot; class=&quot;headerlink&quot; title=&quot;配置文件的位置&quot;&gt;&lt;/a&gt;配置文件的位置&lt;/h2&gt;&lt;p&gt;Tomcat的配置文件在&lt;code&gt;conf&lt;/code&gt;目录下，有&lt;code&gt;context.xml&lt;/code&gt;、&lt;code&gt;server.xml&lt;/code&gt;、&lt;code&gt;tomcat-users.xml&lt;/code&gt;、&lt;code&gt;web.xml&lt;/code&gt;这些配置文件&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://zgj12138.github.io/blog/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="tomcat" scheme="https://zgj12138.github.io/blog/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Java Socket 编程那些事（1）</title>
    <link href="https://zgj12138.github.io/blog/2017/05/02/socket(1)/"/>
    <id>https://zgj12138.github.io/blog/2017/05/02/socket(1)/</id>
    <published>2017-05-02T15:47:44.000Z</published>
    <updated>2017-05-15T09:26:16.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最近在准备面试和笔试的一些东西，回去翻看了Java关于IO的基础，发现很多基础还是没有记牢固，现在回头重新学习，就从socket通讯开始吧，虽然说现在企业很少直接编写socket，都是使用一些封装好的框架，netty,mina等。不过对于这些基础的知识，还是需要掌握牢固的，对于以后学习更深的框架和笔试面试都很有裨益。</p>
</blockquote>
<a id="more"></a>
<h2 id="BIO、NIO、AIO的区别"><a href="#BIO、NIO、AIO的区别" class="headerlink" title="BIO、NIO、AIO的区别"></a>BIO、NIO、AIO的区别</h2><p>Java中的IO的方式有三种<br><strong>Java BIO</strong> ： 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。在JDK1.4以前采用这种方式<br><strong>Java NIO</strong> ： 同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。<br><strong>Java AIO(NIO.2)</strong> ： 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理，</p>
<p>曾经在一篇文章中看到这么很好的比喻</p>
<blockquote>
<p>如果你想吃一份宫保鸡丁盖饭：</p>
<p>同步阻塞：你到饭馆点餐，然后在那等着，还要一边喊：好了没啊！</p>
<p>同步非阻塞：在饭馆点完餐，就去遛狗了。不过溜一会儿，就回饭馆喊一声：好了没啊！</p>
<p>异步阻塞：遛狗的时候，接到饭馆电话，说饭做好了，让您亲自去拿。</p>
<p>异步非阻塞：饭馆打电话说，我们知道您的位置，一会给你送过来，安心遛狗就可以了。</p>
</blockquote>
<p>这里我们从最简单的BIO开始学习吧</p>
<h2 id="单线程通讯"><a href="#单线程通讯" class="headerlink" title="单线程通讯"></a>单线程通讯</h2><p>首先我们先新建一个Server类，这个类将监听12345这个端口，等待客户端的连接,客户端与服务器连接后，客户端可以像服务器发送信息，如果发送bye，则结束通讯<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.gduf.bio.socket.demo1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 基于bio的socket服务器端</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年5月4日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//创建一个serversocket在10000号端口监听</span></div><div class="line">		<span class="keyword">try</span> (ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>)) &#123;</div><div class="line">			<span class="comment">//等待客户端连接，将一直阻塞直到有客户端连接</span></div><div class="line">		    Socket socket = server.accept();</div><div class="line">	        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">	        PrintWriter out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</div><div class="line"></div><div class="line">	        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">	            String msg = in.readLine();</div><div class="line">	            System.out.println(msg);</div><div class="line">	            out.println(<span class="string">"Server received "</span> + msg);</div><div class="line">	            out.flush();</div><div class="line">	            <span class="keyword">if</span> (msg.equals(<span class="string">"bye"</span>)) &#123;</div><div class="line">	                <span class="keyword">break</span>;</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里<code>try (ServerSocket server = new ServerSocket(12345))</code>采用了java7的<code>try-with-resources</code>语法，这样写的好处是try里面声明的资源在最后都会自动关闭，而不需要我们手动关闭，简化了语法</p>
<p>Client类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.gduf.bio.socket.demo1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 基于bio的socket客户端</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年5月4日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">12345</span>)) &#123;</div><div class="line">			<span class="comment">//获取socket输入流</span></div><div class="line">			BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">			<span class="comment">//socket输出流</span></div><div class="line">			PrintWriter out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream());</div><div class="line">			<span class="comment">//标准输入流</span></div><div class="line">			BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">				String msg = reader.readLine();</div><div class="line">				out.println(msg);</div><div class="line">				out.flush();</div><div class="line">				<span class="keyword">if</span> (msg.equals(<span class="string">"bye"</span>)) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				System.out.println(in.readLine());</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><strong>Client:</strong></p>
<p>hello<br>Server received hello<br>haha<br>Server received haha<br>bye</p>
<p><strong>Server:</strong><br>hello<br>haha<br>bye</p>
<h2 id="多线程通讯"><a href="#多线程通讯" class="headerlink" title="多线程通讯"></a>多线程通讯</h2><p>我们发现，服务器只能处理一个客户端的请求，服务器处理了第一个客户端的请求之后，后续的Client就不能再连接，这个时候我们需要做一些改动，当服务器收到客户端的连接请求后，客户端的请求放在一个新的线程中去处理，而主线程仍然继续等待其他客户端的连接，这样就不会阻塞服务器处理其他客户端的请求了，只需要修改服务器的代码，客户端代码和原来的一样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.gduf.bio.socket.demo2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理多个client的server</div><div class="line"> * <span class="doctag">@author</span> ZGJ</div><div class="line"> * <span class="doctag">@date</span> 2017年5月4日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulitClientServer</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span>(ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>)) &#123;</div><div class="line">			<span class="comment">//循环接受客户端请求</span></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">				Socket socket = server.accept();</div><div class="line">				handle(socket);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 处理客户请求</div><div class="line">	 * <span class="doctag">@param</span> socket</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Socket socket)</span> </span>&#123;</div><div class="line">		<span class="comment">//开启一个线程,lambda表达式</span></div><div class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">			<span class="keyword">try</span>(BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">					PrintWriter writer = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>)) &#123;</div><div class="line">				<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">					String message =  in.readLine();</div><div class="line">					System.out.println(message);</div><div class="line">					writer.println(<span class="string">"Server received: "</span> + message);</div><div class="line">					<span class="keyword">if</span>(<span class="string">"bye"</span>.equals(message)) &#123;</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;).start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看到，当服务器接受到一个客户单的请求之后，采用handle()方法去处理客户端的请求，这里使用了Java8中lambda表达式来替代匿名内部类的语法，来简化我们的编程，使我们的语法更加简洁。对于每一个客户端的请求都开启一个新的线程去处理，当然，如果还想做到更加优化，可以采用Executor线程池去处理，节省创建和关闭线程的开销。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近在准备面试和笔试的一些东西，回去翻看了Java关于IO的基础，发现很多基础还是没有记牢固，现在回头重新学习，就从socket通讯开始吧，虽然说现在企业很少直接编写socket，都是使用一些封装好的框架，netty,mina等。不过对于这些基础的知识，还是需要掌握牢固的，对于以后学习更深的框架和笔试面试都很有裨益。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://zgj12138.github.io/blog/categories/Java/"/>
    
    
      <category term="io" scheme="https://zgj12138.github.io/blog/tags/io/"/>
    
      <category term="socket" scheme="https://zgj12138.github.io/blog/tags/socket/"/>
    
  </entry>
  
</feed>
